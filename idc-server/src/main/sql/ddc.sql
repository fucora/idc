/*==============================================================*/
/* DBMS name:      MySQL 5.0                                    */
/* Created on:     2016/6/8 15:46:57                            */
/*==============================================================*/
CREATE DATABASE /*!32312 IF NOT EXISTS*/`DDC` /*!40100 DEFAULT CHARACTER SET UTF8 */;

USE `DDC`;

DROP TABLE IF EXISTS DDC_APPLICATION;

DROP TABLE IF EXISTS DDC_NODE;

DROP TABLE IF EXISTS DDC_RUNNING_TASK;

DROP TABLE IF EXISTS DDC_SERVER;

DROP TABLE IF EXISTS DDC_SUBTASK_EXECUTE_HISTORY;

DROP TABLE IF EXISTS DDC_TASK;

DROP TABLE IF EXISTS DDC_TASK_EXECUTE_HISTORY;

DROP TABLE IF EXISTS DDC_TASK_EXECUTE_STATUS;

DROP TABLE IF EXISTS DDC_TASK_WORKFLOW;

DROP TABLE IF EXISTS DDC_USER;

DROP TABLE IF EXISTS DDC_USER_APPLICATION;

/*==============================================================*/
/* Table: DDC_APPLICATION                                       */
/*==============================================================*/
CREATE TABLE DDC_APPLICATION
(
   APP_ID               INT NOT NULL AUTO_INCREMENT COMMENT '应用编号',
   APP_KEY              VARCHAR(50) NOT NULL COMMENT '应用编码（appKey）',
   APP_NAME             VARCHAR(100) NOT NULL COMMENT '应用名称',
   APP_DESCRIPTION      VARCHAR(255) COMMENT '应用描述',
   APP_STATUS           INT NOT NULL DEFAULT 1 COMMENT '应用状态（1: 有效  0:无效）',
   CREATE_USER          VARCHAR(50) NOT NULL COMMENT '创建人',
   CREATE_TIME          DATETIME NOT NULL COMMENT '创建时间',
   UPDATE_USER          VARCHAR(50) COMMENT '修改人',
   UPDATE_TIME          DATETIME COMMENT '修改时间',
   PRIMARY KEY (APP_ID)
)
ENGINE = INNODB
DEFAULT CHARACTER SET = UTF8;

/*==============================================================*/
/* Index: IDX_DDC_APPLICATION                                   */
/*==============================================================*/
CREATE INDEX IDX_DDC_APPLICATION ON DDC_APPLICATION
(
   APP_KEY,
   APP_STATUS
);

/*==============================================================*/
/* Table: DDC_NODE                                              */
/*==============================================================*/
CREATE TABLE DDC_NODE
(
   ID                   INT NOT NULL AUTO_INCREMENT COMMENT '编号',
   APP_ID               INT NOT NULL COMMENT '应用编码',
   NODE_IP              VARCHAR(30) NOT NULL COMMENT 'IP',
   NODE_PORT            INT NOT NULL COMMENT '端口',
   NODE_CODE            VARCHAR(50) NOT NULL COMMENT '实例编号',
   NODE_PATH            VARCHAR(255) NOT NULL COMMENT '运行路径',
   CLASS_NAMES          TEXT NOT NULL COMMENT '所有任务类名',
   CPU_CORES            INT COMMENT 'CPU核数',
   TASK_COUNT           INT COMMENT '正在执行的任务数量',
   THREADS              INT COMMENT '线程总数',
   TOTAL_MEMORY_PROCESS BIGINT COMMENT '最大内存（进程）',
   FREE_MEMORY_PROCESS  BIGINT COMMENT '剩余内存（进程）',
   TOTAL_MEMORY_MACHINE BIGINT COMMENT '最大内存（机器）',
   FREE_MEMORY_MACHINE  BIGINT COMMENT '剩余内存（机器）',
   CPU_RATIO_MACHINE    DOUBLE COMMENT '机器CPU使用率',
   CPU_RATIO_PROCESS    DOUBLE COMMENT '进程CPU使用率',
   LAST_START_TIME      DATETIME NOT NULL COMMENT '上次启动时间',
   LAST_HB_TIME         DATETIME COMMENT '上次心跳时间',
   OS_NAME              VARCHAR(100) COMMENT '操作系统名称',
   NODE_STATUS          INT NOT NULL DEFAULT 1 COMMENT '实例状态(0:禁用 1:启用)',
   SDK_VERSION          VARCHAR(10) COMMENT 'SDK版本号',
   PRIMARY KEY (ID)
)
ENGINE = INNODB
DEFAULT CHARACTER SET = UTF8;

/*==============================================================*/
/* Index: IDX_DDC_NODE_IP_PORT                                  */
/*==============================================================*/
CREATE INDEX IDX_DDC_NODE_IP_PORT ON DDC_NODE
(
   APP_ID,
   NODE_IP,
   NODE_PORT,
   NODE_CODE
);

/*==============================================================*/
/* Index: IDX_DDC_NODE_APPID_STATUS_HBTIME                      */
/*==============================================================*/
CREATE INDEX IDX_DDC_NODE_APPID_STATUS_HBTIME ON DDC_NODE
(
   APP_ID,
   NODE_STATUS,
   LAST_HB_TIME
);

/*==============================================================*/
/* Table: DDC_RUNNING_TASK                                      */
/*==============================================================*/
CREATE TABLE DDC_RUNNING_TASK
(
   ID                   BIGINT NOT NULL AUTO_INCREMENT COMMENT '编号',
   TASK_ID              INT NOT NULL COMMENT '子任务对应的任务编号',
   EXECUTE_ID           BIGINT NOT NULL COMMENT '执行编号',
   WORKFLOW_EXECUTE_ID  BIGINT DEFAULT 0 COMMENT '流程主任务执行编号（对应DDC_TASK_EXECUTE_HISTORY的EXECUTE_ID）',
   EXECUTE_BATCH_ID     VARCHAR(50) NOT NULL COMMENT '执行批次编号（对应cron的一次触发，包含重试）',
   WORKFLOW_ID          INT DEFAULT 0 COMMENT '本次执行对应的流程编号',
   DISPATCH_TIME        DATETIME COMMENT '派发时间',
   DISPATCH_COUNT       INT COMMENT '派发次数',
   RECEIVE_TIME         DATETIME COMMENT '接收时间',
   START_TIME           DATETIME COMMENT '开始时间',
   COMPLETE_TIME        DATETIME COMMENT '完成时间',
   TIMEOUT              BIGINT DEFAULT 0 COMMENT '超时时间',
   TIMEOUT_TIME         DATETIME COMMENT '超时时间点',
   TIMEOUT_RETRY        INT COMMENT '超时是否重试',
   TIMEOUT_RETRY_TIMES  INT COMMENT '超时重试次数',
   PRIMARY KEY (ID)
)
ENGINE = INNODB
DEFAULT CHARACTER SET = UTF8;

/*==============================================================*/
/* Index: INDEX_DDC_RUNNING_TASK_THREEIDS                       */
/*==============================================================*/
CREATE INDEX INDEX_DDC_RUNNING_TASK_THREEIDS ON DDC_RUNNING_TASK
(
   TASK_ID,
   EXECUTE_ID,
   EXECUTE_BATCH_ID,
   WORKFLOW_EXECUTE_ID
);

/*==============================================================*/
/* Table: DDC_SERVER                                            */
/*==============================================================*/
CREATE TABLE DDC_SERVER
(
   ID                   INT NOT NULL AUTO_INCREMENT COMMENT '编号',
   IP                   VARCHAR(30) NOT NULL COMMENT 'IP',
   PORT                 INT NOT NULL COMMENT '端口',
   STATUS               INT NOT NULL DEFAULT 1 COMMENT '服务器状态(0:禁用 1:启用)',
   LAST_START_TIME      DATETIME COMMENT '上次启动时间',
   LAST_HB_TIME         DATETIME COMMENT '上次心跳时间',
   PRIMARY KEY (ID)
)
ENGINE = INNODB
DEFAULT CHARACTER SET = UTF8;

/*==============================================================*/
/* Table: DDC_SUBTASK_EXECUTE_HISTORY                           */
/*==============================================================*/
CREATE TABLE DDC_SUBTASK_EXECUTE_HISTORY
(
   EXECUTE_ID           BIGINT NOT NULL AUTO_INCREMENT COMMENT '执行编号',
   WORKFLOW_EXECUTE_ID  BIGINT COMMENT '流程主任务执行编号（对应DDC_TASK_EXECUTE_HISTORY的EXECUTE_ID）',
   TASK_ID              INT NOT NULL COMMENT '子任务对应的任务编号',
   EXECUTE_BATCH_ID     VARCHAR(50) NOT NULL COMMENT '执行批次编号（对应cron的一次触发，包含重试）',
   WORKFLOW_ID          INT NOT NULL COMMENT '本次执行对应的流程编号',
   TRIGGER_TYPE         INT COMMENT '触发类型',
   DISPATCH_TIME        DATETIME COMMENT '派发时间',
   DISPATCH_COUNT       INT COMMENT '派发次数',
   DISPATCHER_IP        VARCHAR(30) NOT NULL COMMENT '派发实例IP',
   DISPATCHER_PORT      INT NOT NULL COMMENT '派发实例端口',
   RECEIVE_TIME         DATETIME COMMENT '接收时间',
   START_TIME           DATETIME COMMENT '开始时间',
   COMPLETE_TIME        DATETIME COMMENT '完成时间',
   TIMEOUT              BIGINT DEFAULT 0 COMMENT '超时时间',
   TIMEOUT_TIME         DATETIME COMMENT '超时时间点',
   TIMEOUT_RETRY        INT COMMENT '超时是否重试',
   TIMEOUT_RETRY_TIMES  INT COMMENT '超时重试次数',
   IP                   VARCHAR(30) COMMENT '执行实例IP',
   PORT                 INT COMMENT '执行实例端口',
   NODE_CODE            VARCHAR(50) COMMENT '执行实例编号',
   EXECUTE_RESULT       VARCHAR(50) COMMENT '执行结果',
   EXECUTE_RESULT_DESC  VARCHAR(255) COMMENT '执行结果描述',
   PRIMARY KEY (EXECUTE_ID)
)
ENGINE = INNODB
DEFAULT CHARACTER SET = UTF8;

/*==============================================================*/
/* Index: IDX_DDC_SUBHISTORY_THREEIDS                           */
/*==============================================================*/
CREATE INDEX IDX_DDC_SUBHISTORY_THREEIDS ON DDC_SUBTASK_EXECUTE_HISTORY
(
   WORKFLOW_EXECUTE_ID,
   TASK_ID,
   EXECUTE_BATCH_ID
);

/*==============================================================*/
/* Index: IDX_DDC_SUBHISTORY_DISPATHCTIME_TASKID                */
/*==============================================================*/
CREATE INDEX IDX_DDC_SUBHISTORY_DISPATHCTIME_TASKID ON DDC_SUBTASK_EXECUTE_HISTORY
(
   DISPATCH_TIME,
   TASK_ID
);

/*==============================================================*/
/* Table: DDC_TASK                                              */
/*==============================================================*/
CREATE TABLE DDC_TASK
(
   TASK_ID              INT NOT NULL AUTO_INCREMENT COMMENT '任务编号',
   TASK_NAME            VARCHAR(255) NOT NULL COMMENT '任务名称',
   APP_ID               INT NOT NULL COMMENT '应用编号（对应应用表的ID）',
   APP_KEY              VARCHAR(50) NOT NULL COMMENT '应用编码（appKey，也作为task 的group）',
   TASK_CATEGOTY        INT NOT NULL COMMENT '任务大类（1:独立任务 2:流程任务）',
   TASK_TYPE            INT NOT NULL COMMENT '任务类型（11:定时任务 12:流程子任务 21:流程任务）',
   TASK_IMPLEMENT_TYPE  INT DEFAULT 1 COMMENT '任务实现方式（1:直接实现ITaskService接口 2:继承简单模板类AbstractSimpleTask 3:继承数据量模板类AbstractDataFlowTask）',
   DESCRIPTION          VARCHAR(255) COMMENT '任务描述',
   CLASS_NAME           VARCHAR(255) COMMENT '执行类名',
   PARAMETERS           VARCHAR(10240) COMMENT '执行参数',
   DATA_LIMIT           INT DEFAULT 0 COMMENT '数据量阈值',
   TIMEOUT              BIGINT COMMENT '超时时间（秒）',
   TIMEOUT_RETRY        BOOLEAN DEFAULT FALSE COMMENT '超时是否重试',
   TIMEOUT_RETRY_TIMES  INT DEFAULT 3 COMMENT '超时重试次数',
   FAILED_RETRY         BOOLEAN DEFAULT FALSE COMMENT '执行失败是否重试',
   FAILED_RETRY_TIMES   INT DEFAULT 3 COMMENT '执行失败重试次数',
   FAILED_RETRY_INTERVAL BIGINT DEFAULT 0 COMMENT '执行失败重试间隔时间（秒）',
   CONCURRENCY          BOOLEAN DEFAULT FALSE COMMENT '是否并行运行',
   MUTITHREAD           BOOLEAN DEFAULT FALSE COMMENT '是否多线程运行',
   THREADS              INT DEFAULT 1 COMMENT '运行线程数',
   TASK_STATUS          INT NOT NULL DEFAULT 0 COMMENT '任务状态（0:禁用 1:启用）',
   CRON                 VARCHAR(255) COMMENT 'CRON表达式',
   WAIT_TIME            BIGINT DEFAULT 0 COMMENT '执行前等待时间（秒）',
   OWNER                VARCHAR(50) COMMENT '负责人',
   WORKFLOW_ID          INT COMMENT '流程编号（对应流程表里的流程编号）',
   CREATE_USER          VARCHAR(50) NOT NULL COMMENT '创建人',
   CREATE_TIME          DATETIME NOT NULL COMMENT '创建时间',
   UPDATE_USER          VARCHAR(50) COMMENT '修改人',
   UPDATE_TIME          DATETIME COMMENT '修改时间',
   LAST_EXECUTE_START_TIME DATETIME COMMENT '上次执行开始时间',
   LAST_EXECUTE_END_TIME DATETIME COMMENT '上次执行结束时间',
   LAST_EXECUTE_IP      VARCHAR(30) COMMENT '上次执行节点IP',
   LAST_EXECUTE_PORT    INT COMMENT '上次执行节点端口',
   LAST_EXECUTE_NODE_CODE VARCHAR(50) COMMENT '上次执行节点编码',
   LAST_EXECUTE_STATUS  VARCHAR(50) COMMENT '上次执行状态',
   LAST_EXECUTE_MESSAGE VARCHAR(255) COMMENT '上次执行状态描述',
   PRIMARY KEY (TASK_ID)
)
ENGINE = INNODB
DEFAULT CHARACTER SET = UTF8;

/*==============================================================*/
/* Index: IDX_DDC_TASK_APPID                                    */
/*==============================================================*/
CREATE INDEX IDX_DDC_TASK_APPID ON DDC_TASK
(
   APP_ID
);

/*==============================================================*/
/* Table: DDC_TASK_EXECUTE_HISTORY                              */
/*==============================================================*/
CREATE TABLE DDC_TASK_EXECUTE_HISTORY
(
   EXECUTE_ID           BIGINT NOT NULL AUTO_INCREMENT COMMENT '编号',
   TASK_ID              INT NOT NULL COMMENT '任务编号',
   EXECUTE_BATCH_ID     VARCHAR(50) NOT NULL COMMENT '执行批次编号',
   WORKFLOW_ID          INT DEFAULT 0 COMMENT '流程编号',
   TRIGGER_TYPE         INT COMMENT '触发类型',
   DISPATCH_TIME        DATETIME COMMENT '派发时间',
   DISPATCH_COUNT       INT COMMENT '派发次数',
   DISPATCHER_IP        VARCHAR(30) NOT NULL COMMENT '派发实例IP',
   DISPATCHER_PORT      INT NOT NULL COMMENT '派发实例端口',
   RECEIVE_TIME         DATETIME COMMENT '接收时间',
   START_TIME           DATETIME COMMENT '开始时间',
   COMPLETE_TIME        DATETIME COMMENT '完成时间',
   TIMEOUT              BIGINT DEFAULT 0 COMMENT '超时时间',
   TIMEOUT_TIME         DATETIME COMMENT '超时时间点',
   TIMEOUT_RETRY        INT COMMENT '超时是否重试',
   TIMEOUT_RETRY_TIMES  INT COMMENT '超时重试次数',
   IP                   VARCHAR(30) COMMENT '执行实例IP',
   PORT                 INT COMMENT '执行实例端口',
   NODE_CODE            VARCHAR(50) COMMENT '执行实例编号',
   EXECUTE_RESULT       VARCHAR(50) COMMENT '执行结果',
   EXECUTE_RESULT_DESC  VARCHAR(255) COMMENT '执行结果描述',
   EXECUTE_USER         VARCHAR(50) COMMENT '执行人',
   PRIMARY KEY (EXECUTE_ID)
)
ENGINE = INNODB
DEFAULT CHARACTER SET = UTF8;

/*==============================================================*/
/* Index: IDX_DDC_HISTORY_DISPATHCTIME_TASKID                   */
/*==============================================================*/
CREATE INDEX IDX_DDC_HISTORY_DISPATHCTIME_TASKID ON DDC_TASK_EXECUTE_HISTORY
(
   DISPATCH_TIME,
   TASK_ID
);

/*==============================================================*/
/* Table: DDC_TASK_EXECUTE_STATUS                               */
/*==============================================================*/
CREATE TABLE DDC_TASK_EXECUTE_STATUS
(
   ID                   BIGINT NOT NULL AUTO_INCREMENT COMMENT '编号',
   TASK_ID              INT NOT NULL COMMENT '任务编号',
   EXECUTE_ID           BIGINT NOT NULL COMMENT '执行编号(对应历史及记录表里的EXECUTE_ID)',
   WORKFLOW_EXECUTE_ID  BIGINT DEFAULT 0 COMMENT '流程主任务执行编号（对应DDC_TASK_EXECUTE_HISTORY的EXECUTE_ID）',
   EXECUTE_BATCH_ID     VARCHAR(50) NOT NULL COMMENT '执行批次编号',
   WORKFLOW_ID          INT COMMENT '流程编号',
   STATUS               VARCHAR(255) NOT NULL COMMENT '状态',
   MESSAGE              VARCHAR(1024) COMMENT '状态信息',
   TIMESTAMP            DATETIME NOT NULL COMMENT '时间',
   PRIMARY KEY (ID)
)
ENGINE = INNODB
DEFAULT CHARACTER SET = UTF8;

/*==============================================================*/
/* Index: IDX_DDC_TASK_STATUS_THREEIDS                          */
/*==============================================================*/
CREATE INDEX IDX_DDC_TASK_STATUS_THREEIDS ON DDC_TASK_EXECUTE_STATUS
(
   TASK_ID,
   EXECUTE_ID,
   WORKFLOW_EXECUTE_ID
);

/*==============================================================*/
/* Table: DDC_TASK_WORKFLOW                                     */
/*==============================================================*/
CREATE TABLE DDC_TASK_WORKFLOW
(
   WORKFLOW_ID          INT NOT NULL AUTO_INCREMENT COMMENT '流程编号',
   WORKFLOW             BLOB NOT NULL COMMENT '流程定义',
   JSON                 LONGTEXT NOT NULL COMMENT '流程定义JSON格式（供页面使用）',
   TASK_ID              INT COMMENT '对应任务编号',
   CREATE_USER          VARCHAR(50) NOT NULL COMMENT '创建人',
   CREATE_TIME          DATETIME NOT NULL COMMENT '创建时间',
   UPDATE_USER          VARCHAR(50) COMMENT '修改人',
   UPDATE_TIME          DATETIME COMMENT '修改时间',
   STATUS               INT DEFAULT 1 COMMENT '流程状态',
   PRIMARY KEY (WORKFLOW_ID)
)
ENGINE = INNODB
DEFAULT CHARACTER SET = UTF8;

/*==============================================================*/
/* Table: DDC_USER                                              */
/*==============================================================*/
CREATE TABLE DDC_USER
(
   ID                   INT NOT NULL AUTO_INCREMENT COMMENT '编号',
   USER_ID              INT NOT NULL COMMENT '用户编号',
   LOGIN_NAME           VARCHAR(50) NOT NULL COMMENT '用户登录名',
   USER_NAME            VARCHAR(50) COMMENT '姓名',
   USER_PHONE           VARCHAR(50) COMMENT '手机',
   USER_EMAIL           VARCHAR(50) COMMENT '邮箱',
   CREATE_USER          VARCHAR(50) NOT NULL COMMENT '创建人',
   CREATE_TIME          DATETIME NOT NULL COMMENT '创建时间',
   UPDATE_USER          VARCHAR(50) COMMENT '修改人',
   UPDATE_TIME          DATETIME COMMENT '修改时间',
   PRIMARY KEY (ID)
)
ENGINE = INNODB
DEFAULT CHARACTER SET = UTF8;

/*==============================================================*/
/* Index: IDX_DDC_USER_USERID                                   */
/*==============================================================*/
CREATE INDEX IDX_DDC_USER_USERID ON DDC_USER
(
   USER_ID
);

/*==============================================================*/
/* Table: DDC_USER_APPLICATION                                  */
/*==============================================================*/
CREATE TABLE DDC_USER_APPLICATION
(
   ID                   INT NOT NULL AUTO_INCREMENT COMMENT '编号',
   USER_ID              INT NOT NULL COMMENT '用户编号',
   LOGIN_NAME           VARCHAR(50) NOT NULL COMMENT '用户登录名',
   APP_ID               INT NOT NULL COMMENT '应用编号',
   CREATE_USER          VARCHAR(50) NOT NULL COMMENT '创建人',
   CREATE_TIME          DATETIME NOT NULL COMMENT '创建时间',
   PRIMARY KEY (ID)
)
ENGINE = INNODB
DEFAULT CHARACTER SET = UTF8;

/*==============================================================*/
/* Index: IDX_DDC_USER_APP_APPID                                */
/*==============================================================*/
CREATE INDEX IDX_DDC_USER_APP_APPID ON DDC_USER_APPLICATION
(
   APP_ID
);

DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
DROP TABLE IF EXISTS QRTZ_LOCKS;
DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
DROP TABLE IF EXISTS QRTZ_CALENDARS;

CREATE TABLE QRTZ_JOB_DETAILS(
SCHED_NAME VARCHAR(120) NOT NULL,
JOB_NAME VARCHAR(200) NOT NULL,
JOB_GROUP VARCHAR(200) NOT NULL,
DESCRIPTION VARCHAR(250) NULL,
JOB_CLASS_NAME VARCHAR(250) NOT NULL,
IS_DURABLE VARCHAR(1) NOT NULL,
IS_NONCONCURRENT VARCHAR(1) NOT NULL,
IS_UPDATE_DATA VARCHAR(1) NOT NULL,
REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
JOB_DATA BLOB NULL,
PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_TRIGGERS (
SCHED_NAME VARCHAR(120) NOT NULL,
TRIGGER_NAME VARCHAR(200) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
JOB_NAME VARCHAR(200) NOT NULL,
JOB_GROUP VARCHAR(200) NOT NULL,
DESCRIPTION VARCHAR(250) NULL,
NEXT_FIRE_TIME BIGINT(13) NULL,
PREV_FIRE_TIME BIGINT(13) NULL,
PRIORITY INTEGER NULL,
TRIGGER_STATE VARCHAR(16) NOT NULL,
TRIGGER_TYPE VARCHAR(8) NOT NULL,
START_TIME BIGINT(13) NOT NULL,
END_TIME BIGINT(13) NULL,
CALENDAR_NAME VARCHAR(200) NULL,
MISFIRE_INSTR SMALLINT(2) NULL,
JOB_DATA BLOB NULL,
PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
SCHED_NAME VARCHAR(120) NOT NULL,
TRIGGER_NAME VARCHAR(200) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
REPEAT_COUNT BIGINT(7) NOT NULL,
REPEAT_INTERVAL BIGINT(12) NOT NULL,
TIMES_TRIGGERED BIGINT(10) NOT NULL,
PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_CRON_TRIGGERS (
SCHED_NAME VARCHAR(120) NOT NULL,
TRIGGER_NAME VARCHAR(200) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
CRON_EXPRESSION VARCHAR(120) NOT NULL,
TIME_ZONE_ID VARCHAR(80),
PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_SIMPROP_TRIGGERS
  (          
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    STR_PROP_1 VARCHAR(512) NULL,
    STR_PROP_2 VARCHAR(512) NULL,
    STR_PROP_3 VARCHAR(512) NULL,
    INT_PROP_1 INT NULL,
    INT_PROP_2 INT NULL,
    LONG_PROP_1 BIGINT NULL,
    LONG_PROP_2 BIGINT NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 VARCHAR(1) NULL,
    BOOL_PROP_2 VARCHAR(1) NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_BLOB_TRIGGERS (
SCHED_NAME VARCHAR(120) NOT NULL,
TRIGGER_NAME VARCHAR(200) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
BLOB_DATA BLOB NULL,
PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
INDEX (SCHED_NAME,TRIGGER_NAME, TRIGGER_GROUP),
FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_CALENDARS (
SCHED_NAME VARCHAR(120) NOT NULL,
CALENDAR_NAME VARCHAR(200) NOT NULL,
CALENDAR BLOB NOT NULL,
PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))
ENGINE=InnoDB;

CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
SCHED_NAME VARCHAR(120) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))
ENGINE=InnoDB;

CREATE TABLE QRTZ_FIRED_TRIGGERS (
SCHED_NAME VARCHAR(120) NOT NULL,
ENTRY_ID VARCHAR(95) NOT NULL,
TRIGGER_NAME VARCHAR(200) NOT NULL,
TRIGGER_GROUP VARCHAR(200) NOT NULL,
INSTANCE_NAME VARCHAR(200) NOT NULL,
FIRED_TIME BIGINT(13) NOT NULL,
SCHED_TIME BIGINT(13) NOT NULL,
PRIORITY INTEGER NOT NULL,
STATE VARCHAR(16) NOT NULL,
JOB_NAME VARCHAR(200) NULL,
JOB_GROUP VARCHAR(200) NULL,
IS_NONCONCURRENT VARCHAR(1) NULL,
REQUESTS_RECOVERY VARCHAR(1) NULL,
PRIMARY KEY (SCHED_NAME,ENTRY_ID))
ENGINE=InnoDB;

CREATE TABLE QRTZ_SCHEDULER_STATE (
SCHED_NAME VARCHAR(120) NOT NULL,
INSTANCE_NAME VARCHAR(200) NOT NULL,
LAST_CHECKIN_TIME BIGINT(13) NOT NULL,
CHECKIN_INTERVAL BIGINT(13) NOT NULL,
PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))
ENGINE=InnoDB;

CREATE TABLE QRTZ_LOCKS (
SCHED_NAME VARCHAR(120) NOT NULL,
LOCK_NAME VARCHAR(40) NOT NULL,
PRIMARY KEY (SCHED_NAME,LOCK_NAME))
ENGINE=InnoDB;

CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);

CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);
CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);
CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);