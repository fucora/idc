/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.iwellmass.dispatcher.thrift.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-17")
public class StatusServerService {

  public interface Iface {

    public com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult registerExecutor(com.iwellmass.dispatcher.thrift.model.NodeInfo nodeInfo) throws org.apache.thrift.TException;

    public com.iwellmass.dispatcher.thrift.model.SendResult sendTaskStatus(com.iwellmass.dispatcher.thrift.model.TaskStatusInfo status) throws org.apache.thrift.TException;

    public com.iwellmass.dispatcher.thrift.model.SendResult sendTaskStatusList(List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> status) throws org.apache.thrift.TException;

    public com.iwellmass.dispatcher.thrift.model.SendResult sendHeartBeat(com.iwellmass.dispatcher.thrift.model.HeartBeatInfo heartBeatInfo) throws org.apache.thrift.TException;

    public List<com.iwellmass.dispatcher.thrift.model.ServerAddress> queryServerAddress() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerExecutor(com.iwellmass.dispatcher.thrift.model.NodeInfo nodeInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendTaskStatus(com.iwellmass.dispatcher.thrift.model.TaskStatusInfo status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendTaskStatusList(List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendHeartBeat(com.iwellmass.dispatcher.thrift.model.HeartBeatInfo heartBeatInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryServerAddress(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult registerExecutor(com.iwellmass.dispatcher.thrift.model.NodeInfo nodeInfo) throws org.apache.thrift.TException
    {
      send_registerExecutor(nodeInfo);
      return recv_registerExecutor();
    }

    public void send_registerExecutor(com.iwellmass.dispatcher.thrift.model.NodeInfo nodeInfo) throws org.apache.thrift.TException
    {
      registerExecutor_args args = new registerExecutor_args();
      args.setNodeInfo(nodeInfo);
      sendBase("registerExecutor", args);
    }

    public com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult recv_registerExecutor() throws org.apache.thrift.TException
    {
      registerExecutor_result result = new registerExecutor_result();
      receiveBase(result, "registerExecutor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerExecutor failed: unknown result");
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult sendTaskStatus(com.iwellmass.dispatcher.thrift.model.TaskStatusInfo status) throws org.apache.thrift.TException
    {
      send_sendTaskStatus(status);
      return recv_sendTaskStatus();
    }

    public void send_sendTaskStatus(com.iwellmass.dispatcher.thrift.model.TaskStatusInfo status) throws org.apache.thrift.TException
    {
      sendTaskStatus_args args = new sendTaskStatus_args();
      args.setStatus(status);
      sendBase("sendTaskStatus", args);
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult recv_sendTaskStatus() throws org.apache.thrift.TException
    {
      sendTaskStatus_result result = new sendTaskStatus_result();
      receiveBase(result, "sendTaskStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendTaskStatus failed: unknown result");
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult sendTaskStatusList(List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> status) throws org.apache.thrift.TException
    {
      send_sendTaskStatusList(status);
      return recv_sendTaskStatusList();
    }

    public void send_sendTaskStatusList(List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> status) throws org.apache.thrift.TException
    {
      sendTaskStatusList_args args = new sendTaskStatusList_args();
      args.setStatus(status);
      sendBase("sendTaskStatusList", args);
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult recv_sendTaskStatusList() throws org.apache.thrift.TException
    {
      sendTaskStatusList_result result = new sendTaskStatusList_result();
      receiveBase(result, "sendTaskStatusList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendTaskStatusList failed: unknown result");
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult sendHeartBeat(com.iwellmass.dispatcher.thrift.model.HeartBeatInfo heartBeatInfo) throws org.apache.thrift.TException
    {
      send_sendHeartBeat(heartBeatInfo);
      return recv_sendHeartBeat();
    }

    public void send_sendHeartBeat(com.iwellmass.dispatcher.thrift.model.HeartBeatInfo heartBeatInfo) throws org.apache.thrift.TException
    {
      sendHeartBeat_args args = new sendHeartBeat_args();
      args.setHeartBeatInfo(heartBeatInfo);
      sendBase("sendHeartBeat", args);
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult recv_sendHeartBeat() throws org.apache.thrift.TException
    {
      sendHeartBeat_result result = new sendHeartBeat_result();
      receiveBase(result, "sendHeartBeat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendHeartBeat failed: unknown result");
    }

    public List<com.iwellmass.dispatcher.thrift.model.ServerAddress> queryServerAddress() throws org.apache.thrift.TException
    {
      send_queryServerAddress();
      return recv_queryServerAddress();
    }

    public void send_queryServerAddress() throws org.apache.thrift.TException
    {
      queryServerAddress_args args = new queryServerAddress_args();
      sendBase("queryServerAddress", args);
    }

    public List<com.iwellmass.dispatcher.thrift.model.ServerAddress> recv_queryServerAddress() throws org.apache.thrift.TException
    {
      queryServerAddress_result result = new queryServerAddress_result();
      receiveBase(result, "queryServerAddress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryServerAddress failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerExecutor(com.iwellmass.dispatcher.thrift.model.NodeInfo nodeInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerExecutor_call method_call = new registerExecutor_call(nodeInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerExecutor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.iwellmass.dispatcher.thrift.model.NodeInfo nodeInfo;
      public registerExecutor_call(com.iwellmass.dispatcher.thrift.model.NodeInfo nodeInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeInfo = nodeInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerExecutor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerExecutor_args args = new registerExecutor_args();
        args.setNodeInfo(nodeInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerExecutor();
      }
    }

    public void sendTaskStatus(com.iwellmass.dispatcher.thrift.model.TaskStatusInfo status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendTaskStatus_call method_call = new sendTaskStatus_call(status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendTaskStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.iwellmass.dispatcher.thrift.model.TaskStatusInfo status;
      public sendTaskStatus_call(com.iwellmass.dispatcher.thrift.model.TaskStatusInfo status, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendTaskStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendTaskStatus_args args = new sendTaskStatus_args();
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.iwellmass.dispatcher.thrift.model.SendResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendTaskStatus();
      }
    }

    public void sendTaskStatusList(List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendTaskStatusList_call method_call = new sendTaskStatusList_call(status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendTaskStatusList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> status;
      public sendTaskStatusList_call(List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> status, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendTaskStatusList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendTaskStatusList_args args = new sendTaskStatusList_args();
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.iwellmass.dispatcher.thrift.model.SendResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendTaskStatusList();
      }
    }

    public void sendHeartBeat(com.iwellmass.dispatcher.thrift.model.HeartBeatInfo heartBeatInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendHeartBeat_call method_call = new sendHeartBeat_call(heartBeatInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendHeartBeat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.iwellmass.dispatcher.thrift.model.HeartBeatInfo heartBeatInfo;
      public sendHeartBeat_call(com.iwellmass.dispatcher.thrift.model.HeartBeatInfo heartBeatInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.heartBeatInfo = heartBeatInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendHeartBeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendHeartBeat_args args = new sendHeartBeat_args();
        args.setHeartBeatInfo(heartBeatInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.iwellmass.dispatcher.thrift.model.SendResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendHeartBeat();
      }
    }

    public void queryServerAddress(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryServerAddress_call method_call = new queryServerAddress_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryServerAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
      public queryServerAddress_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryServerAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryServerAddress_args args = new queryServerAddress_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.iwellmass.dispatcher.thrift.model.ServerAddress> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryServerAddress();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerExecutor", new registerExecutor());
      processMap.put("sendTaskStatus", new sendTaskStatus());
      processMap.put("sendTaskStatusList", new sendTaskStatusList());
      processMap.put("sendHeartBeat", new sendHeartBeat());
      processMap.put("queryServerAddress", new queryServerAddress());
      return processMap;
    }

    public static class registerExecutor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerExecutor_args> {
      public registerExecutor() {
        super("registerExecutor");
      }

      public registerExecutor_args getEmptyArgsInstance() {
        return new registerExecutor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerExecutor_result getResult(I iface, registerExecutor_args args) throws org.apache.thrift.TException {
        registerExecutor_result result = new registerExecutor_result();
        result.success = iface.registerExecutor(args.nodeInfo);
        return result;
      }
    }

    public static class sendTaskStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendTaskStatus_args> {
      public sendTaskStatus() {
        super("sendTaskStatus");
      }

      public sendTaskStatus_args getEmptyArgsInstance() {
        return new sendTaskStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendTaskStatus_result getResult(I iface, sendTaskStatus_args args) throws org.apache.thrift.TException {
        sendTaskStatus_result result = new sendTaskStatus_result();
        result.success = iface.sendTaskStatus(args.status);
        return result;
      }
    }

    public static class sendTaskStatusList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendTaskStatusList_args> {
      public sendTaskStatusList() {
        super("sendTaskStatusList");
      }

      public sendTaskStatusList_args getEmptyArgsInstance() {
        return new sendTaskStatusList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendTaskStatusList_result getResult(I iface, sendTaskStatusList_args args) throws org.apache.thrift.TException {
        sendTaskStatusList_result result = new sendTaskStatusList_result();
        result.success = iface.sendTaskStatusList(args.status);
        return result;
      }
    }

    public static class sendHeartBeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendHeartBeat_args> {
      public sendHeartBeat() {
        super("sendHeartBeat");
      }

      public sendHeartBeat_args getEmptyArgsInstance() {
        return new sendHeartBeat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendHeartBeat_result getResult(I iface, sendHeartBeat_args args) throws org.apache.thrift.TException {
        sendHeartBeat_result result = new sendHeartBeat_result();
        result.success = iface.sendHeartBeat(args.heartBeatInfo);
        return result;
      }
    }

    public static class queryServerAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryServerAddress_args> {
      public queryServerAddress() {
        super("queryServerAddress");
      }

      public queryServerAddress_args getEmptyArgsInstance() {
        return new queryServerAddress_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryServerAddress_result getResult(I iface, queryServerAddress_args args) throws org.apache.thrift.TException {
        queryServerAddress_result result = new queryServerAddress_result();
        result.success = iface.queryServerAddress();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("registerExecutor", new registerExecutor());
      processMap.put("sendTaskStatus", new sendTaskStatus());
      processMap.put("sendTaskStatusList", new sendTaskStatusList());
      processMap.put("sendHeartBeat", new sendHeartBeat());
      processMap.put("queryServerAddress", new queryServerAddress());
      return processMap;
    }

    public static class registerExecutor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerExecutor_args, com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult> {
      public registerExecutor() {
        super("registerExecutor");
      }

      public registerExecutor_args getEmptyArgsInstance() {
        return new registerExecutor_args();
      }

      public AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult>() { 
          public void onComplete(com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult o) {
            registerExecutor_result result = new registerExecutor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerExecutor_result result = new registerExecutor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerExecutor_args args, org.apache.thrift.async.AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult> resultHandler) throws TException {
        iface.registerExecutor(args.nodeInfo,resultHandler);
      }
    }

    public static class sendTaskStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendTaskStatus_args, com.iwellmass.dispatcher.thrift.model.SendResult> {
      public sendTaskStatus() {
        super("sendTaskStatus");
      }

      public sendTaskStatus_args getEmptyArgsInstance() {
        return new sendTaskStatus_args();
      }

      public AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.SendResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.SendResult>() { 
          public void onComplete(com.iwellmass.dispatcher.thrift.model.SendResult o) {
            sendTaskStatus_result result = new sendTaskStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendTaskStatus_result result = new sendTaskStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendTaskStatus_args args, org.apache.thrift.async.AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.SendResult> resultHandler) throws TException {
        iface.sendTaskStatus(args.status,resultHandler);
      }
    }

    public static class sendTaskStatusList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendTaskStatusList_args, com.iwellmass.dispatcher.thrift.model.SendResult> {
      public sendTaskStatusList() {
        super("sendTaskStatusList");
      }

      public sendTaskStatusList_args getEmptyArgsInstance() {
        return new sendTaskStatusList_args();
      }

      public AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.SendResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.SendResult>() { 
          public void onComplete(com.iwellmass.dispatcher.thrift.model.SendResult o) {
            sendTaskStatusList_result result = new sendTaskStatusList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendTaskStatusList_result result = new sendTaskStatusList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendTaskStatusList_args args, org.apache.thrift.async.AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.SendResult> resultHandler) throws TException {
        iface.sendTaskStatusList(args.status,resultHandler);
      }
    }

    public static class sendHeartBeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendHeartBeat_args, com.iwellmass.dispatcher.thrift.model.SendResult> {
      public sendHeartBeat() {
        super("sendHeartBeat");
      }

      public sendHeartBeat_args getEmptyArgsInstance() {
        return new sendHeartBeat_args();
      }

      public AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.SendResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.SendResult>() { 
          public void onComplete(com.iwellmass.dispatcher.thrift.model.SendResult o) {
            sendHeartBeat_result result = new sendHeartBeat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendHeartBeat_result result = new sendHeartBeat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendHeartBeat_args args, org.apache.thrift.async.AsyncMethodCallback<com.iwellmass.dispatcher.thrift.model.SendResult> resultHandler) throws TException {
        iface.sendHeartBeat(args.heartBeatInfo,resultHandler);
      }
    }

    public static class queryServerAddress<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryServerAddress_args, List<com.iwellmass.dispatcher.thrift.model.ServerAddress>> {
      public queryServerAddress() {
        super("queryServerAddress");
      }

      public queryServerAddress_args getEmptyArgsInstance() {
        return new queryServerAddress_args();
      }

      public AsyncMethodCallback<List<com.iwellmass.dispatcher.thrift.model.ServerAddress>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.iwellmass.dispatcher.thrift.model.ServerAddress>>() { 
          public void onComplete(List<com.iwellmass.dispatcher.thrift.model.ServerAddress> o) {
            queryServerAddress_result result = new queryServerAddress_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryServerAddress_result result = new queryServerAddress_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryServerAddress_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.iwellmass.dispatcher.thrift.model.ServerAddress>> resultHandler) throws TException {
        iface.queryServerAddress(resultHandler);
      }
    }

  }

  public static class registerExecutor_args implements org.apache.thrift.TBase<registerExecutor_args, registerExecutor_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerExecutor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerExecutor_args");

    private static final org.apache.thrift.protocol.TField NODE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerExecutor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerExecutor_argsTupleSchemeFactory());
    }

    public com.iwellmass.dispatcher.thrift.model.NodeInfo nodeInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_INFO((short)1, "nodeInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_INFO
            return NODE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.iwellmass.dispatcher.thrift.model.NodeInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerExecutor_args.class, metaDataMap);
    }

    public registerExecutor_args() {
    }

    public registerExecutor_args(
      com.iwellmass.dispatcher.thrift.model.NodeInfo nodeInfo)
    {
      this();
      this.nodeInfo = nodeInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerExecutor_args(registerExecutor_args other) {
      if (other.isSetNodeInfo()) {
        this.nodeInfo = new com.iwellmass.dispatcher.thrift.model.NodeInfo(other.nodeInfo);
      }
    }

    public registerExecutor_args deepCopy() {
      return new registerExecutor_args(this);
    }

    @Override
    public void clear() {
      this.nodeInfo = null;
    }

    public com.iwellmass.dispatcher.thrift.model.NodeInfo getNodeInfo() {
      return this.nodeInfo;
    }

    public registerExecutor_args setNodeInfo(com.iwellmass.dispatcher.thrift.model.NodeInfo nodeInfo) {
      this.nodeInfo = nodeInfo;
      return this;
    }

    public void unsetNodeInfo() {
      this.nodeInfo = null;
    }

    /** Returns true if field nodeInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeInfo() {
      return this.nodeInfo != null;
    }

    public void setNodeInfoIsSet(boolean value) {
      if (!value) {
        this.nodeInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_INFO:
        if (value == null) {
          unsetNodeInfo();
        } else {
          setNodeInfo((com.iwellmass.dispatcher.thrift.model.NodeInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_INFO:
        return getNodeInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_INFO:
        return isSetNodeInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerExecutor_args)
        return this.equals((registerExecutor_args)that);
      return false;
    }

    public boolean equals(registerExecutor_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeInfo = true && this.isSetNodeInfo();
      boolean that_present_nodeInfo = true && that.isSetNodeInfo();
      if (this_present_nodeInfo || that_present_nodeInfo) {
        if (!(this_present_nodeInfo && that_present_nodeInfo))
          return false;
        if (!this.nodeInfo.equals(that.nodeInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeInfo = true && (isSetNodeInfo());
      list.add(present_nodeInfo);
      if (present_nodeInfo)
        list.add(nodeInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerExecutor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeInfo()).compareTo(other.isSetNodeInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInfo, other.nodeInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerExecutor_args(");
      boolean first = true;

      sb.append("nodeInfo:");
      if (this.nodeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (nodeInfo != null) {
        nodeInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerExecutor_argsStandardSchemeFactory implements SchemeFactory {
      public registerExecutor_argsStandardScheme getScheme() {
        return new registerExecutor_argsStandardScheme();
      }
    }

    private static class registerExecutor_argsStandardScheme extends StandardScheme<registerExecutor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerExecutor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nodeInfo = new com.iwellmass.dispatcher.thrift.model.NodeInfo();
                struct.nodeInfo.read(iprot);
                struct.setNodeInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerExecutor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeInfo != null) {
          oprot.writeFieldBegin(NODE_INFO_FIELD_DESC);
          struct.nodeInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerExecutor_argsTupleSchemeFactory implements SchemeFactory {
      public registerExecutor_argsTupleScheme getScheme() {
        return new registerExecutor_argsTupleScheme();
      }
    }

    private static class registerExecutor_argsTupleScheme extends TupleScheme<registerExecutor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerExecutor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNodeInfo()) {
          struct.nodeInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerExecutor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nodeInfo = new com.iwellmass.dispatcher.thrift.model.NodeInfo();
          struct.nodeInfo.read(iprot);
          struct.setNodeInfoIsSet(true);
        }
      }
    }

  }

  public static class registerExecutor_result implements org.apache.thrift.TBase<registerExecutor_result, registerExecutor_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerExecutor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerExecutor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerExecutor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerExecutor_resultTupleSchemeFactory());
    }

    public com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerExecutor_result.class, metaDataMap);
    }

    public registerExecutor_result() {
    }

    public registerExecutor_result(
      com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerExecutor_result(registerExecutor_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult(other.success);
      }
    }

    public registerExecutor_result deepCopy() {
      return new registerExecutor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult getSuccess() {
      return this.success;
    }

    public registerExecutor_result setSuccess(com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerExecutor_result)
        return this.equals((registerExecutor_result)that);
      return false;
    }

    public boolean equals(registerExecutor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerExecutor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerExecutor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerExecutor_resultStandardSchemeFactory implements SchemeFactory {
      public registerExecutor_resultStandardScheme getScheme() {
        return new registerExecutor_resultStandardScheme();
      }
    }

    private static class registerExecutor_resultStandardScheme extends StandardScheme<registerExecutor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerExecutor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerExecutor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerExecutor_resultTupleSchemeFactory implements SchemeFactory {
      public registerExecutor_resultTupleScheme getScheme() {
        return new registerExecutor_resultTupleScheme();
      }
    }

    private static class registerExecutor_resultTupleScheme extends TupleScheme<registerExecutor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerExecutor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerExecutor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.iwellmass.dispatcher.thrift.model.ExecutorRegisterResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendTaskStatus_args implements org.apache.thrift.TBase<sendTaskStatus_args, sendTaskStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendTaskStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTaskStatus_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTaskStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTaskStatus_argsTupleSchemeFactory());
    }

    public com.iwellmass.dispatcher.thrift.model.TaskStatusInfo status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.iwellmass.dispatcher.thrift.model.TaskStatusInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTaskStatus_args.class, metaDataMap);
    }

    public sendTaskStatus_args() {
    }

    public sendTaskStatus_args(
      com.iwellmass.dispatcher.thrift.model.TaskStatusInfo status)
    {
      this();
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTaskStatus_args(sendTaskStatus_args other) {
      if (other.isSetStatus()) {
        this.status = new com.iwellmass.dispatcher.thrift.model.TaskStatusInfo(other.status);
      }
    }

    public sendTaskStatus_args deepCopy() {
      return new sendTaskStatus_args(this);
    }

    @Override
    public void clear() {
      this.status = null;
    }

    public com.iwellmass.dispatcher.thrift.model.TaskStatusInfo getStatus() {
      return this.status;
    }

    public sendTaskStatus_args setStatus(com.iwellmass.dispatcher.thrift.model.TaskStatusInfo status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((com.iwellmass.dispatcher.thrift.model.TaskStatusInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTaskStatus_args)
        return this.equals((sendTaskStatus_args)that);
      return false;
    }

    public boolean equals(sendTaskStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_status = true && (isSetStatus());
      list.add(present_status);
      if (present_status)
        list.add(status);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendTaskStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTaskStatus_args(");
      boolean first = true;

      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (status != null) {
        status.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTaskStatus_argsStandardSchemeFactory implements SchemeFactory {
      public sendTaskStatus_argsStandardScheme getScheme() {
        return new sendTaskStatus_argsStandardScheme();
      }
    }

    private static class sendTaskStatus_argsStandardScheme extends StandardScheme<sendTaskStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTaskStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.status = new com.iwellmass.dispatcher.thrift.model.TaskStatusInfo();
                struct.status.read(iprot);
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTaskStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTaskStatus_argsTupleSchemeFactory implements SchemeFactory {
      public sendTaskStatus_argsTupleScheme getScheme() {
        return new sendTaskStatus_argsTupleScheme();
      }
    }

    private static class sendTaskStatus_argsTupleScheme extends TupleScheme<sendTaskStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTaskStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatus()) {
          struct.status.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTaskStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.status = new com.iwellmass.dispatcher.thrift.model.TaskStatusInfo();
          struct.status.read(iprot);
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class sendTaskStatus_result implements org.apache.thrift.TBase<sendTaskStatus_result, sendTaskStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendTaskStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTaskStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTaskStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTaskStatus_resultTupleSchemeFactory());
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.iwellmass.dispatcher.thrift.model.SendResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTaskStatus_result.class, metaDataMap);
    }

    public sendTaskStatus_result() {
    }

    public sendTaskStatus_result(
      com.iwellmass.dispatcher.thrift.model.SendResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTaskStatus_result(sendTaskStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.iwellmass.dispatcher.thrift.model.SendResult(other.success);
      }
    }

    public sendTaskStatus_result deepCopy() {
      return new sendTaskStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult getSuccess() {
      return this.success;
    }

    public sendTaskStatus_result setSuccess(com.iwellmass.dispatcher.thrift.model.SendResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.iwellmass.dispatcher.thrift.model.SendResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTaskStatus_result)
        return this.equals((sendTaskStatus_result)that);
      return false;
    }

    public boolean equals(sendTaskStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendTaskStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTaskStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTaskStatus_resultStandardSchemeFactory implements SchemeFactory {
      public sendTaskStatus_resultStandardScheme getScheme() {
        return new sendTaskStatus_resultStandardScheme();
      }
    }

    private static class sendTaskStatus_resultStandardScheme extends StandardScheme<sendTaskStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTaskStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.iwellmass.dispatcher.thrift.model.SendResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTaskStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTaskStatus_resultTupleSchemeFactory implements SchemeFactory {
      public sendTaskStatus_resultTupleScheme getScheme() {
        return new sendTaskStatus_resultTupleScheme();
      }
    }

    private static class sendTaskStatus_resultTupleScheme extends TupleScheme<sendTaskStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTaskStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTaskStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.iwellmass.dispatcher.thrift.model.SendResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendTaskStatusList_args implements org.apache.thrift.TBase<sendTaskStatusList_args, sendTaskStatusList_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendTaskStatusList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTaskStatusList_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTaskStatusList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTaskStatusList_argsTupleSchemeFactory());
    }

    public List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.iwellmass.dispatcher.thrift.model.TaskStatusInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTaskStatusList_args.class, metaDataMap);
    }

    public sendTaskStatusList_args() {
    }

    public sendTaskStatusList_args(
      List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> status)
    {
      this();
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTaskStatusList_args(sendTaskStatusList_args other) {
      if (other.isSetStatus()) {
        List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> __this__status = new ArrayList<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo>(other.status.size());
        for (com.iwellmass.dispatcher.thrift.model.TaskStatusInfo other_element : other.status) {
          __this__status.add(new com.iwellmass.dispatcher.thrift.model.TaskStatusInfo(other_element));
        }
        this.status = __this__status;
      }
    }

    public sendTaskStatusList_args deepCopy() {
      return new sendTaskStatusList_args(this);
    }

    @Override
    public void clear() {
      this.status = null;
    }

    public int getStatusSize() {
      return (this.status == null) ? 0 : this.status.size();
    }

    public java.util.Iterator<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> getStatusIterator() {
      return (this.status == null) ? null : this.status.iterator();
    }

    public void addToStatus(com.iwellmass.dispatcher.thrift.model.TaskStatusInfo elem) {
      if (this.status == null) {
        this.status = new ArrayList<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo>();
      }
      this.status.add(elem);
    }

    public List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> getStatus() {
      return this.status;
    }

    public sendTaskStatusList_args setStatus(List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo> status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((List<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTaskStatusList_args)
        return this.equals((sendTaskStatusList_args)that);
      return false;
    }

    public boolean equals(sendTaskStatusList_args that) {
      if (that == null)
        return false;

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_status = true && (isSetStatus());
      list.add(present_status);
      if (present_status)
        list.add(status);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendTaskStatusList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTaskStatusList_args(");
      boolean first = true;

      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTaskStatusList_argsStandardSchemeFactory implements SchemeFactory {
      public sendTaskStatusList_argsStandardScheme getScheme() {
        return new sendTaskStatusList_argsStandardScheme();
      }
    }

    private static class sendTaskStatusList_argsStandardScheme extends StandardScheme<sendTaskStatusList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTaskStatusList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.status = new ArrayList<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo>(_list0.size);
                  com.iwellmass.dispatcher.thrift.model.TaskStatusInfo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.iwellmass.dispatcher.thrift.model.TaskStatusInfo();
                    _elem1.read(iprot);
                    struct.status.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTaskStatusList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.status.size()));
            for (com.iwellmass.dispatcher.thrift.model.TaskStatusInfo _iter3 : struct.status)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTaskStatusList_argsTupleSchemeFactory implements SchemeFactory {
      public sendTaskStatusList_argsTupleScheme getScheme() {
        return new sendTaskStatusList_argsTupleScheme();
      }
    }

    private static class sendTaskStatusList_argsTupleScheme extends TupleScheme<sendTaskStatusList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTaskStatusList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatus()) {
          {
            oprot.writeI32(struct.status.size());
            for (com.iwellmass.dispatcher.thrift.model.TaskStatusInfo _iter4 : struct.status)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTaskStatusList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.status = new ArrayList<com.iwellmass.dispatcher.thrift.model.TaskStatusInfo>(_list5.size);
            com.iwellmass.dispatcher.thrift.model.TaskStatusInfo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.iwellmass.dispatcher.thrift.model.TaskStatusInfo();
              _elem6.read(iprot);
              struct.status.add(_elem6);
            }
          }
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class sendTaskStatusList_result implements org.apache.thrift.TBase<sendTaskStatusList_result, sendTaskStatusList_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendTaskStatusList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTaskStatusList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTaskStatusList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTaskStatusList_resultTupleSchemeFactory());
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.iwellmass.dispatcher.thrift.model.SendResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTaskStatusList_result.class, metaDataMap);
    }

    public sendTaskStatusList_result() {
    }

    public sendTaskStatusList_result(
      com.iwellmass.dispatcher.thrift.model.SendResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTaskStatusList_result(sendTaskStatusList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.iwellmass.dispatcher.thrift.model.SendResult(other.success);
      }
    }

    public sendTaskStatusList_result deepCopy() {
      return new sendTaskStatusList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult getSuccess() {
      return this.success;
    }

    public sendTaskStatusList_result setSuccess(com.iwellmass.dispatcher.thrift.model.SendResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.iwellmass.dispatcher.thrift.model.SendResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTaskStatusList_result)
        return this.equals((sendTaskStatusList_result)that);
      return false;
    }

    public boolean equals(sendTaskStatusList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendTaskStatusList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTaskStatusList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTaskStatusList_resultStandardSchemeFactory implements SchemeFactory {
      public sendTaskStatusList_resultStandardScheme getScheme() {
        return new sendTaskStatusList_resultStandardScheme();
      }
    }

    private static class sendTaskStatusList_resultStandardScheme extends StandardScheme<sendTaskStatusList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTaskStatusList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.iwellmass.dispatcher.thrift.model.SendResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTaskStatusList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTaskStatusList_resultTupleSchemeFactory implements SchemeFactory {
      public sendTaskStatusList_resultTupleScheme getScheme() {
        return new sendTaskStatusList_resultTupleScheme();
      }
    }

    private static class sendTaskStatusList_resultTupleScheme extends TupleScheme<sendTaskStatusList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTaskStatusList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTaskStatusList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.iwellmass.dispatcher.thrift.model.SendResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendHeartBeat_args implements org.apache.thrift.TBase<sendHeartBeat_args, sendHeartBeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendHeartBeat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendHeartBeat_args");

    private static final org.apache.thrift.protocol.TField HEART_BEAT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("heartBeatInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendHeartBeat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendHeartBeat_argsTupleSchemeFactory());
    }

    public com.iwellmass.dispatcher.thrift.model.HeartBeatInfo heartBeatInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEART_BEAT_INFO((short)1, "heartBeatInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEART_BEAT_INFO
            return HEART_BEAT_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEART_BEAT_INFO, new org.apache.thrift.meta_data.FieldMetaData("heartBeatInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.iwellmass.dispatcher.thrift.model.HeartBeatInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendHeartBeat_args.class, metaDataMap);
    }

    public sendHeartBeat_args() {
    }

    public sendHeartBeat_args(
      com.iwellmass.dispatcher.thrift.model.HeartBeatInfo heartBeatInfo)
    {
      this();
      this.heartBeatInfo = heartBeatInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendHeartBeat_args(sendHeartBeat_args other) {
      if (other.isSetHeartBeatInfo()) {
        this.heartBeatInfo = new com.iwellmass.dispatcher.thrift.model.HeartBeatInfo(other.heartBeatInfo);
      }
    }

    public sendHeartBeat_args deepCopy() {
      return new sendHeartBeat_args(this);
    }

    @Override
    public void clear() {
      this.heartBeatInfo = null;
    }

    public com.iwellmass.dispatcher.thrift.model.HeartBeatInfo getHeartBeatInfo() {
      return this.heartBeatInfo;
    }

    public sendHeartBeat_args setHeartBeatInfo(com.iwellmass.dispatcher.thrift.model.HeartBeatInfo heartBeatInfo) {
      this.heartBeatInfo = heartBeatInfo;
      return this;
    }

    public void unsetHeartBeatInfo() {
      this.heartBeatInfo = null;
    }

    /** Returns true if field heartBeatInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetHeartBeatInfo() {
      return this.heartBeatInfo != null;
    }

    public void setHeartBeatInfoIsSet(boolean value) {
      if (!value) {
        this.heartBeatInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEART_BEAT_INFO:
        if (value == null) {
          unsetHeartBeatInfo();
        } else {
          setHeartBeatInfo((com.iwellmass.dispatcher.thrift.model.HeartBeatInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEART_BEAT_INFO:
        return getHeartBeatInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEART_BEAT_INFO:
        return isSetHeartBeatInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendHeartBeat_args)
        return this.equals((sendHeartBeat_args)that);
      return false;
    }

    public boolean equals(sendHeartBeat_args that) {
      if (that == null)
        return false;

      boolean this_present_heartBeatInfo = true && this.isSetHeartBeatInfo();
      boolean that_present_heartBeatInfo = true && that.isSetHeartBeatInfo();
      if (this_present_heartBeatInfo || that_present_heartBeatInfo) {
        if (!(this_present_heartBeatInfo && that_present_heartBeatInfo))
          return false;
        if (!this.heartBeatInfo.equals(that.heartBeatInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_heartBeatInfo = true && (isSetHeartBeatInfo());
      list.add(present_heartBeatInfo);
      if (present_heartBeatInfo)
        list.add(heartBeatInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendHeartBeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHeartBeatInfo()).compareTo(other.isSetHeartBeatInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeartBeatInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartBeatInfo, other.heartBeatInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendHeartBeat_args(");
      boolean first = true;

      sb.append("heartBeatInfo:");
      if (this.heartBeatInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.heartBeatInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (heartBeatInfo != null) {
        heartBeatInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendHeartBeat_argsStandardSchemeFactory implements SchemeFactory {
      public sendHeartBeat_argsStandardScheme getScheme() {
        return new sendHeartBeat_argsStandardScheme();
      }
    }

    private static class sendHeartBeat_argsStandardScheme extends StandardScheme<sendHeartBeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendHeartBeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEART_BEAT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.heartBeatInfo = new com.iwellmass.dispatcher.thrift.model.HeartBeatInfo();
                struct.heartBeatInfo.read(iprot);
                struct.setHeartBeatInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendHeartBeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.heartBeatInfo != null) {
          oprot.writeFieldBegin(HEART_BEAT_INFO_FIELD_DESC);
          struct.heartBeatInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendHeartBeat_argsTupleSchemeFactory implements SchemeFactory {
      public sendHeartBeat_argsTupleScheme getScheme() {
        return new sendHeartBeat_argsTupleScheme();
      }
    }

    private static class sendHeartBeat_argsTupleScheme extends TupleScheme<sendHeartBeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendHeartBeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHeartBeatInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHeartBeatInfo()) {
          struct.heartBeatInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendHeartBeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.heartBeatInfo = new com.iwellmass.dispatcher.thrift.model.HeartBeatInfo();
          struct.heartBeatInfo.read(iprot);
          struct.setHeartBeatInfoIsSet(true);
        }
      }
    }

  }

  public static class sendHeartBeat_result implements org.apache.thrift.TBase<sendHeartBeat_result, sendHeartBeat_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendHeartBeat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendHeartBeat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendHeartBeat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendHeartBeat_resultTupleSchemeFactory());
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.iwellmass.dispatcher.thrift.model.SendResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendHeartBeat_result.class, metaDataMap);
    }

    public sendHeartBeat_result() {
    }

    public sendHeartBeat_result(
      com.iwellmass.dispatcher.thrift.model.SendResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendHeartBeat_result(sendHeartBeat_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.iwellmass.dispatcher.thrift.model.SendResult(other.success);
      }
    }

    public sendHeartBeat_result deepCopy() {
      return new sendHeartBeat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.iwellmass.dispatcher.thrift.model.SendResult getSuccess() {
      return this.success;
    }

    public sendHeartBeat_result setSuccess(com.iwellmass.dispatcher.thrift.model.SendResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.iwellmass.dispatcher.thrift.model.SendResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendHeartBeat_result)
        return this.equals((sendHeartBeat_result)that);
      return false;
    }

    public boolean equals(sendHeartBeat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendHeartBeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendHeartBeat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendHeartBeat_resultStandardSchemeFactory implements SchemeFactory {
      public sendHeartBeat_resultStandardScheme getScheme() {
        return new sendHeartBeat_resultStandardScheme();
      }
    }

    private static class sendHeartBeat_resultStandardScheme extends StandardScheme<sendHeartBeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendHeartBeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.iwellmass.dispatcher.thrift.model.SendResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendHeartBeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendHeartBeat_resultTupleSchemeFactory implements SchemeFactory {
      public sendHeartBeat_resultTupleScheme getScheme() {
        return new sendHeartBeat_resultTupleScheme();
      }
    }

    private static class sendHeartBeat_resultTupleScheme extends TupleScheme<sendHeartBeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendHeartBeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendHeartBeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.iwellmass.dispatcher.thrift.model.SendResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryServerAddress_args implements org.apache.thrift.TBase<queryServerAddress_args, queryServerAddress_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryServerAddress_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryServerAddress_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryServerAddress_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryServerAddress_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryServerAddress_args.class, metaDataMap);
    }

    public queryServerAddress_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryServerAddress_args(queryServerAddress_args other) {
    }

    public queryServerAddress_args deepCopy() {
      return new queryServerAddress_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryServerAddress_args)
        return this.equals((queryServerAddress_args)that);
      return false;
    }

    public boolean equals(queryServerAddress_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(queryServerAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryServerAddress_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryServerAddress_argsStandardSchemeFactory implements SchemeFactory {
      public queryServerAddress_argsStandardScheme getScheme() {
        return new queryServerAddress_argsStandardScheme();
      }
    }

    private static class queryServerAddress_argsStandardScheme extends StandardScheme<queryServerAddress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryServerAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryServerAddress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryServerAddress_argsTupleSchemeFactory implements SchemeFactory {
      public queryServerAddress_argsTupleScheme getScheme() {
        return new queryServerAddress_argsTupleScheme();
      }
    }

    private static class queryServerAddress_argsTupleScheme extends TupleScheme<queryServerAddress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryServerAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryServerAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queryServerAddress_result implements org.apache.thrift.TBase<queryServerAddress_result, queryServerAddress_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryServerAddress_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryServerAddress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryServerAddress_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryServerAddress_resultTupleSchemeFactory());
    }

    public List<com.iwellmass.dispatcher.thrift.model.ServerAddress> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.iwellmass.dispatcher.thrift.model.ServerAddress.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryServerAddress_result.class, metaDataMap);
    }

    public queryServerAddress_result() {
    }

    public queryServerAddress_result(
      List<com.iwellmass.dispatcher.thrift.model.ServerAddress> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryServerAddress_result(queryServerAddress_result other) {
      if (other.isSetSuccess()) {
        List<com.iwellmass.dispatcher.thrift.model.ServerAddress> __this__success = new ArrayList<com.iwellmass.dispatcher.thrift.model.ServerAddress>(other.success.size());
        for (com.iwellmass.dispatcher.thrift.model.ServerAddress other_element : other.success) {
          __this__success.add(new com.iwellmass.dispatcher.thrift.model.ServerAddress(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryServerAddress_result deepCopy() {
      return new queryServerAddress_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.iwellmass.dispatcher.thrift.model.ServerAddress> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.iwellmass.dispatcher.thrift.model.ServerAddress elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.iwellmass.dispatcher.thrift.model.ServerAddress>();
      }
      this.success.add(elem);
    }

    public List<com.iwellmass.dispatcher.thrift.model.ServerAddress> getSuccess() {
      return this.success;
    }

    public queryServerAddress_result setSuccess(List<com.iwellmass.dispatcher.thrift.model.ServerAddress> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.iwellmass.dispatcher.thrift.model.ServerAddress>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryServerAddress_result)
        return this.equals((queryServerAddress_result)that);
      return false;
    }

    public boolean equals(queryServerAddress_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryServerAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryServerAddress_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryServerAddress_resultStandardSchemeFactory implements SchemeFactory {
      public queryServerAddress_resultStandardScheme getScheme() {
        return new queryServerAddress_resultStandardScheme();
      }
    }

    private static class queryServerAddress_resultStandardScheme extends StandardScheme<queryServerAddress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryServerAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.iwellmass.dispatcher.thrift.model.ServerAddress>(_list8.size);
                  com.iwellmass.dispatcher.thrift.model.ServerAddress _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.iwellmass.dispatcher.thrift.model.ServerAddress();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryServerAddress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.iwellmass.dispatcher.thrift.model.ServerAddress _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryServerAddress_resultTupleSchemeFactory implements SchemeFactory {
      public queryServerAddress_resultTupleScheme getScheme() {
        return new queryServerAddress_resultTupleScheme();
      }
    }

    private static class queryServerAddress_resultTupleScheme extends TupleScheme<queryServerAddress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryServerAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.iwellmass.dispatcher.thrift.model.ServerAddress _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryServerAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.iwellmass.dispatcher.thrift.model.ServerAddress>(_list13.size);
            com.iwellmass.dispatcher.thrift.model.ServerAddress _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.iwellmass.dispatcher.thrift.model.ServerAddress();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
