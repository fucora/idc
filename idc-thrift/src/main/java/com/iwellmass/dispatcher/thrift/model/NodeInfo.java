/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.iwellmass.dispatcher.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-17")
public class NodeInfo implements org.apache.thrift.TBase<NodeInfo, NodeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<NodeInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeInfo");

  private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CLASS_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("classNames", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CORE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("coreSize", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField OS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("osName", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeInfoTupleSchemeFactory());
  }

  public String appKey; // required
  public String nodeCode; // required
  public String path; // required
  public String ip; // required
  public int port; // required
  public String classNames; // required
  public String version; // required
  public int coreSize; // required
  public String osName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_KEY((short)1, "appKey"),
    NODE_CODE((short)2, "nodeCode"),
    PATH((short)3, "path"),
    IP((short)4, "ip"),
    PORT((short)5, "port"),
    CLASS_NAMES((short)6, "classNames"),
    VERSION((short)7, "version"),
    CORE_SIZE((short)8, "coreSize"),
    OS_NAME((short)9, "osName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_KEY
          return APP_KEY;
        case 2: // NODE_CODE
          return NODE_CODE;
        case 3: // PATH
          return PATH;
        case 4: // IP
          return IP;
        case 5: // PORT
          return PORT;
        case 6: // CLASS_NAMES
          return CLASS_NAMES;
        case 7: // VERSION
          return VERSION;
        case 8: // CORE_SIZE
          return CORE_SIZE;
        case 9: // OS_NAME
          return OS_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __CORESIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_CODE, new org.apache.thrift.meta_data.FieldMetaData("nodeCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLASS_NAMES, new org.apache.thrift.meta_data.FieldMetaData("classNames", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("coreSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OS_NAME, new org.apache.thrift.meta_data.FieldMetaData("osName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeInfo.class, metaDataMap);
  }

  public NodeInfo() {
  }

  public NodeInfo(
    String appKey,
    String nodeCode,
    String path,
    String ip,
    int port,
    String classNames,
    String version,
    int coreSize,
    String osName)
  {
    this();
    this.appKey = appKey;
    this.nodeCode = nodeCode;
    this.path = path;
    this.ip = ip;
    this.port = port;
    setPortIsSet(true);
    this.classNames = classNames;
    this.version = version;
    this.coreSize = coreSize;
    setCoreSizeIsSet(true);
    this.osName = osName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeInfo(NodeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppKey()) {
      this.appKey = other.appKey;
    }
    if (other.isSetNodeCode()) {
      this.nodeCode = other.nodeCode;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.port = other.port;
    if (other.isSetClassNames()) {
      this.classNames = other.classNames;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    this.coreSize = other.coreSize;
    if (other.isSetOsName()) {
      this.osName = other.osName;
    }
  }

  public NodeInfo deepCopy() {
    return new NodeInfo(this);
  }

  @Override
  public void clear() {
    this.appKey = null;
    this.nodeCode = null;
    this.path = null;
    this.ip = null;
    setPortIsSet(false);
    this.port = 0;
    this.classNames = null;
    this.version = null;
    setCoreSizeIsSet(false);
    this.coreSize = 0;
    this.osName = null;
  }

  public String getAppKey() {
    return this.appKey;
  }

  public NodeInfo setAppKey(String appKey) {
    this.appKey = appKey;
    return this;
  }

  public void unsetAppKey() {
    this.appKey = null;
  }

  /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAppKey() {
    return this.appKey != null;
  }

  public void setAppKeyIsSet(boolean value) {
    if (!value) {
      this.appKey = null;
    }
  }

  public String getNodeCode() {
    return this.nodeCode;
  }

  public NodeInfo setNodeCode(String nodeCode) {
    this.nodeCode = nodeCode;
    return this;
  }

  public void unsetNodeCode() {
    this.nodeCode = null;
  }

  /** Returns true if field nodeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeCode() {
    return this.nodeCode != null;
  }

  public void setNodeCodeIsSet(boolean value) {
    if (!value) {
      this.nodeCode = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public NodeInfo setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public NodeInfo setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public NodeInfo setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public String getClassNames() {
    return this.classNames;
  }

  public NodeInfo setClassNames(String classNames) {
    this.classNames = classNames;
    return this;
  }

  public void unsetClassNames() {
    this.classNames = null;
  }

  /** Returns true if field classNames is set (has been assigned a value) and false otherwise */
  public boolean isSetClassNames() {
    return this.classNames != null;
  }

  public void setClassNamesIsSet(boolean value) {
    if (!value) {
      this.classNames = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public NodeInfo setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public int getCoreSize() {
    return this.coreSize;
  }

  public NodeInfo setCoreSize(int coreSize) {
    this.coreSize = coreSize;
    setCoreSizeIsSet(true);
    return this;
  }

  public void unsetCoreSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORESIZE_ISSET_ID);
  }

  /** Returns true if field coreSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCoreSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CORESIZE_ISSET_ID);
  }

  public void setCoreSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORESIZE_ISSET_ID, value);
  }

  public String getOsName() {
    return this.osName;
  }

  public NodeInfo setOsName(String osName) {
    this.osName = osName;
    return this;
  }

  public void unsetOsName() {
    this.osName = null;
  }

  /** Returns true if field osName is set (has been assigned a value) and false otherwise */
  public boolean isSetOsName() {
    return this.osName != null;
  }

  public void setOsNameIsSet(boolean value) {
    if (!value) {
      this.osName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_KEY:
      if (value == null) {
        unsetAppKey();
      } else {
        setAppKey((String)value);
      }
      break;

    case NODE_CODE:
      if (value == null) {
        unsetNodeCode();
      } else {
        setNodeCode((String)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case CLASS_NAMES:
      if (value == null) {
        unsetClassNames();
      } else {
        setClassNames((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case CORE_SIZE:
      if (value == null) {
        unsetCoreSize();
      } else {
        setCoreSize((Integer)value);
      }
      break;

    case OS_NAME:
      if (value == null) {
        unsetOsName();
      } else {
        setOsName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_KEY:
      return getAppKey();

    case NODE_CODE:
      return getNodeCode();

    case PATH:
      return getPath();

    case IP:
      return getIp();

    case PORT:
      return Integer.valueOf(getPort());

    case CLASS_NAMES:
      return getClassNames();

    case VERSION:
      return getVersion();

    case CORE_SIZE:
      return Integer.valueOf(getCoreSize());

    case OS_NAME:
      return getOsName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_KEY:
      return isSetAppKey();
    case NODE_CODE:
      return isSetNodeCode();
    case PATH:
      return isSetPath();
    case IP:
      return isSetIp();
    case PORT:
      return isSetPort();
    case CLASS_NAMES:
      return isSetClassNames();
    case VERSION:
      return isSetVersion();
    case CORE_SIZE:
      return isSetCoreSize();
    case OS_NAME:
      return isSetOsName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeInfo)
      return this.equals((NodeInfo)that);
    return false;
  }

  public boolean equals(NodeInfo that) {
    if (that == null)
      return false;

    boolean this_present_appKey = true && this.isSetAppKey();
    boolean that_present_appKey = true && that.isSetAppKey();
    if (this_present_appKey || that_present_appKey) {
      if (!(this_present_appKey && that_present_appKey))
        return false;
      if (!this.appKey.equals(that.appKey))
        return false;
    }

    boolean this_present_nodeCode = true && this.isSetNodeCode();
    boolean that_present_nodeCode = true && that.isSetNodeCode();
    if (this_present_nodeCode || that_present_nodeCode) {
      if (!(this_present_nodeCode && that_present_nodeCode))
        return false;
      if (!this.nodeCode.equals(that.nodeCode))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_classNames = true && this.isSetClassNames();
    boolean that_present_classNames = true && that.isSetClassNames();
    if (this_present_classNames || that_present_classNames) {
      if (!(this_present_classNames && that_present_classNames))
        return false;
      if (!this.classNames.equals(that.classNames))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_coreSize = true;
    boolean that_present_coreSize = true;
    if (this_present_coreSize || that_present_coreSize) {
      if (!(this_present_coreSize && that_present_coreSize))
        return false;
      if (this.coreSize != that.coreSize)
        return false;
    }

    boolean this_present_osName = true && this.isSetOsName();
    boolean that_present_osName = true && that.isSetOsName();
    if (this_present_osName || that_present_osName) {
      if (!(this_present_osName && that_present_osName))
        return false;
      if (!this.osName.equals(that.osName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_appKey = true && (isSetAppKey());
    list.add(present_appKey);
    if (present_appKey)
      list.add(appKey);

    boolean present_nodeCode = true && (isSetNodeCode());
    list.add(present_nodeCode);
    if (present_nodeCode)
      list.add(nodeCode);

    boolean present_path = true && (isSetPath());
    list.add(present_path);
    if (present_path)
      list.add(path);

    boolean present_ip = true && (isSetIp());
    list.add(present_ip);
    if (present_ip)
      list.add(ip);

    boolean present_port = true;
    list.add(present_port);
    if (present_port)
      list.add(port);

    boolean present_classNames = true && (isSetClassNames());
    list.add(present_classNames);
    if (present_classNames)
      list.add(classNames);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_coreSize = true;
    list.add(present_coreSize);
    if (present_coreSize)
      list.add(coreSize);

    boolean present_osName = true && (isSetOsName());
    list.add(present_osName);
    if (present_osName)
      list.add(osName);

    return list.hashCode();
  }

  @Override
  public int compareTo(NodeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(other.isSetAppKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, other.appKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeCode()).compareTo(other.isSetNodeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeCode, other.nodeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassNames()).compareTo(other.isSetClassNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classNames, other.classNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoreSize()).compareTo(other.isSetCoreSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoreSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreSize, other.coreSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsName()).compareTo(other.isSetOsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osName, other.osName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodeInfo(");
    boolean first = true;

    sb.append("appKey:");
    if (this.appKey == null) {
      sb.append("null");
    } else {
      sb.append(this.appKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeCode:");
    if (this.nodeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("classNames:");
    if (this.classNames == null) {
      sb.append("null");
    } else {
      sb.append(this.classNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coreSize:");
    sb.append(this.coreSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("osName:");
    if (this.osName == null) {
      sb.append("null");
    } else {
      sb.append(this.osName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (appKey == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appKey' was not present! Struct: " + toString());
    }
    if (nodeCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeCode' was not present! Struct: " + toString());
    }
    if (path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'path' was not present! Struct: " + toString());
    }
    if (ip == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ip' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'port' because it's a primitive and you chose the non-beans generator.
    if (classNames == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'classNames' was not present! Struct: " + toString());
    }
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'coreSize' because it's a primitive and you chose the non-beans generator.
    if (osName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'osName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeInfoStandardSchemeFactory implements SchemeFactory {
    public NodeInfoStandardScheme getScheme() {
      return new NodeInfoStandardScheme();
    }
  }

  private static class NodeInfoStandardScheme extends StandardScheme<NodeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appKey = iprot.readString();
              struct.setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeCode = iprot.readString();
              struct.setNodeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLASS_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.classNames = iprot.readString();
              struct.setClassNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CORE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coreSize = iprot.readI32();
              struct.setCoreSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osName = iprot.readString();
              struct.setOsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'port' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCoreSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'coreSize' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appKey != null) {
        oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
        oprot.writeString(struct.appKey);
        oprot.writeFieldEnd();
      }
      if (struct.nodeCode != null) {
        oprot.writeFieldBegin(NODE_CODE_FIELD_DESC);
        oprot.writeString(struct.nodeCode);
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      if (struct.classNames != null) {
        oprot.writeFieldBegin(CLASS_NAMES_FIELD_DESC);
        oprot.writeString(struct.classNames);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CORE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.coreSize);
      oprot.writeFieldEnd();
      if (struct.osName != null) {
        oprot.writeFieldBegin(OS_NAME_FIELD_DESC);
        oprot.writeString(struct.osName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeInfoTupleSchemeFactory implements SchemeFactory {
    public NodeInfoTupleScheme getScheme() {
      return new NodeInfoTupleScheme();
    }
  }

  private static class NodeInfoTupleScheme extends TupleScheme<NodeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.appKey);
      oprot.writeString(struct.nodeCode);
      oprot.writeString(struct.path);
      oprot.writeString(struct.ip);
      oprot.writeI32(struct.port);
      oprot.writeString(struct.classNames);
      oprot.writeString(struct.version);
      oprot.writeI32(struct.coreSize);
      oprot.writeString(struct.osName);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.appKey = iprot.readString();
      struct.setAppKeyIsSet(true);
      struct.nodeCode = iprot.readString();
      struct.setNodeCodeIsSet(true);
      struct.path = iprot.readString();
      struct.setPathIsSet(true);
      struct.ip = iprot.readString();
      struct.setIpIsSet(true);
      struct.port = iprot.readI32();
      struct.setPortIsSet(true);
      struct.classNames = iprot.readString();
      struct.setClassNamesIsSet(true);
      struct.version = iprot.readString();
      struct.setVersionIsSet(true);
      struct.coreSize = iprot.readI32();
      struct.setCoreSizeIsSet(true);
      struct.osName = iprot.readString();
      struct.setOsNameIsSet(true);
    }
  }

}

