/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.iwellmass.dispatcher.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-17")
public class NodeEnvInfo implements org.apache.thrift.TBase<NodeEnvInfo, NodeEnvInfo._Fields>, java.io.Serializable, Cloneable, Comparable<NodeEnvInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeEnvInfo");

  private static final org.apache.thrift.protocol.TField TOTAL_MEMORY_MACHINE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMemoryMachine", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FREE_MEMORY_MACHINE_FIELD_DESC = new org.apache.thrift.protocol.TField("freeMemoryMachine", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_MEMORY_PROCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMemoryProcess", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FREE_MEMORY_PROCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("freeMemoryProcess", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_THREAD_FIELD_DESC = new org.apache.thrift.protocol.TField("totalThread", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CPU_RATIO_MACHINE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuRatioMachine", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CPU_RATIO_PROCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuRatioProcess", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeEnvInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeEnvInfoTupleSchemeFactory());
  }

  public long totalMemoryMachine; // optional
  public long freeMemoryMachine; // optional
  public long totalMemoryProcess; // optional
  public long freeMemoryProcess; // optional
  public int totalThread; // optional
  public double cpuRatioMachine; // optional
  public double cpuRatioProcess; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_MEMORY_MACHINE((short)1, "totalMemoryMachine"),
    FREE_MEMORY_MACHINE((short)2, "freeMemoryMachine"),
    TOTAL_MEMORY_PROCESS((short)3, "totalMemoryProcess"),
    FREE_MEMORY_PROCESS((short)4, "freeMemoryProcess"),
    TOTAL_THREAD((short)5, "totalThread"),
    CPU_RATIO_MACHINE((short)6, "cpuRatioMachine"),
    CPU_RATIO_PROCESS((short)7, "cpuRatioProcess");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_MEMORY_MACHINE
          return TOTAL_MEMORY_MACHINE;
        case 2: // FREE_MEMORY_MACHINE
          return FREE_MEMORY_MACHINE;
        case 3: // TOTAL_MEMORY_PROCESS
          return TOTAL_MEMORY_PROCESS;
        case 4: // FREE_MEMORY_PROCESS
          return FREE_MEMORY_PROCESS;
        case 5: // TOTAL_THREAD
          return TOTAL_THREAD;
        case 6: // CPU_RATIO_MACHINE
          return CPU_RATIO_MACHINE;
        case 7: // CPU_RATIO_PROCESS
          return CPU_RATIO_PROCESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALMEMORYMACHINE_ISSET_ID = 0;
  private static final int __FREEMEMORYMACHINE_ISSET_ID = 1;
  private static final int __TOTALMEMORYPROCESS_ISSET_ID = 2;
  private static final int __FREEMEMORYPROCESS_ISSET_ID = 3;
  private static final int __TOTALTHREAD_ISSET_ID = 4;
  private static final int __CPURATIOMACHINE_ISSET_ID = 5;
  private static final int __CPURATIOPROCESS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TOTAL_MEMORY_MACHINE,_Fields.FREE_MEMORY_MACHINE,_Fields.TOTAL_MEMORY_PROCESS,_Fields.FREE_MEMORY_PROCESS,_Fields.TOTAL_THREAD,_Fields.CPU_RATIO_MACHINE,_Fields.CPU_RATIO_PROCESS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_MEMORY_MACHINE, new org.apache.thrift.meta_data.FieldMetaData("totalMemoryMachine", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FREE_MEMORY_MACHINE, new org.apache.thrift.meta_data.FieldMetaData("freeMemoryMachine", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_MEMORY_PROCESS, new org.apache.thrift.meta_data.FieldMetaData("totalMemoryProcess", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FREE_MEMORY_PROCESS, new org.apache.thrift.meta_data.FieldMetaData("freeMemoryProcess", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_THREAD, new org.apache.thrift.meta_data.FieldMetaData("totalThread", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPU_RATIO_MACHINE, new org.apache.thrift.meta_data.FieldMetaData("cpuRatioMachine", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CPU_RATIO_PROCESS, new org.apache.thrift.meta_data.FieldMetaData("cpuRatioProcess", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeEnvInfo.class, metaDataMap);
  }

  public NodeEnvInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeEnvInfo(NodeEnvInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalMemoryMachine = other.totalMemoryMachine;
    this.freeMemoryMachine = other.freeMemoryMachine;
    this.totalMemoryProcess = other.totalMemoryProcess;
    this.freeMemoryProcess = other.freeMemoryProcess;
    this.totalThread = other.totalThread;
    this.cpuRatioMachine = other.cpuRatioMachine;
    this.cpuRatioProcess = other.cpuRatioProcess;
  }

  public NodeEnvInfo deepCopy() {
    return new NodeEnvInfo(this);
  }

  @Override
  public void clear() {
    setTotalMemoryMachineIsSet(false);
    this.totalMemoryMachine = 0;
    setFreeMemoryMachineIsSet(false);
    this.freeMemoryMachine = 0;
    setTotalMemoryProcessIsSet(false);
    this.totalMemoryProcess = 0;
    setFreeMemoryProcessIsSet(false);
    this.freeMemoryProcess = 0;
    setTotalThreadIsSet(false);
    this.totalThread = 0;
    setCpuRatioMachineIsSet(false);
    this.cpuRatioMachine = 0.0;
    setCpuRatioProcessIsSet(false);
    this.cpuRatioProcess = 0.0;
  }

  public long getTotalMemoryMachine() {
    return this.totalMemoryMachine;
  }

  public NodeEnvInfo setTotalMemoryMachine(long totalMemoryMachine) {
    this.totalMemoryMachine = totalMemoryMachine;
    setTotalMemoryMachineIsSet(true);
    return this;
  }

  public void unsetTotalMemoryMachine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMEMORYMACHINE_ISSET_ID);
  }

  /** Returns true if field totalMemoryMachine is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMemoryMachine() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMEMORYMACHINE_ISSET_ID);
  }

  public void setTotalMemoryMachineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMEMORYMACHINE_ISSET_ID, value);
  }

  public long getFreeMemoryMachine() {
    return this.freeMemoryMachine;
  }

  public NodeEnvInfo setFreeMemoryMachine(long freeMemoryMachine) {
    this.freeMemoryMachine = freeMemoryMachine;
    setFreeMemoryMachineIsSet(true);
    return this;
  }

  public void unsetFreeMemoryMachine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREEMEMORYMACHINE_ISSET_ID);
  }

  /** Returns true if field freeMemoryMachine is set (has been assigned a value) and false otherwise */
  public boolean isSetFreeMemoryMachine() {
    return EncodingUtils.testBit(__isset_bitfield, __FREEMEMORYMACHINE_ISSET_ID);
  }

  public void setFreeMemoryMachineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREEMEMORYMACHINE_ISSET_ID, value);
  }

  public long getTotalMemoryProcess() {
    return this.totalMemoryProcess;
  }

  public NodeEnvInfo setTotalMemoryProcess(long totalMemoryProcess) {
    this.totalMemoryProcess = totalMemoryProcess;
    setTotalMemoryProcessIsSet(true);
    return this;
  }

  public void unsetTotalMemoryProcess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMEMORYPROCESS_ISSET_ID);
  }

  /** Returns true if field totalMemoryProcess is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMemoryProcess() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMEMORYPROCESS_ISSET_ID);
  }

  public void setTotalMemoryProcessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMEMORYPROCESS_ISSET_ID, value);
  }

  public long getFreeMemoryProcess() {
    return this.freeMemoryProcess;
  }

  public NodeEnvInfo setFreeMemoryProcess(long freeMemoryProcess) {
    this.freeMemoryProcess = freeMemoryProcess;
    setFreeMemoryProcessIsSet(true);
    return this;
  }

  public void unsetFreeMemoryProcess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREEMEMORYPROCESS_ISSET_ID);
  }

  /** Returns true if field freeMemoryProcess is set (has been assigned a value) and false otherwise */
  public boolean isSetFreeMemoryProcess() {
    return EncodingUtils.testBit(__isset_bitfield, __FREEMEMORYPROCESS_ISSET_ID);
  }

  public void setFreeMemoryProcessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREEMEMORYPROCESS_ISSET_ID, value);
  }

  public int getTotalThread() {
    return this.totalThread;
  }

  public NodeEnvInfo setTotalThread(int totalThread) {
    this.totalThread = totalThread;
    setTotalThreadIsSet(true);
    return this;
  }

  public void unsetTotalThread() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALTHREAD_ISSET_ID);
  }

  /** Returns true if field totalThread is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalThread() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALTHREAD_ISSET_ID);
  }

  public void setTotalThreadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALTHREAD_ISSET_ID, value);
  }

  public double getCpuRatioMachine() {
    return this.cpuRatioMachine;
  }

  public NodeEnvInfo setCpuRatioMachine(double cpuRatioMachine) {
    this.cpuRatioMachine = cpuRatioMachine;
    setCpuRatioMachineIsSet(true);
    return this;
  }

  public void unsetCpuRatioMachine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPURATIOMACHINE_ISSET_ID);
  }

  /** Returns true if field cpuRatioMachine is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuRatioMachine() {
    return EncodingUtils.testBit(__isset_bitfield, __CPURATIOMACHINE_ISSET_ID);
  }

  public void setCpuRatioMachineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPURATIOMACHINE_ISSET_ID, value);
  }

  public double getCpuRatioProcess() {
    return this.cpuRatioProcess;
  }

  public NodeEnvInfo setCpuRatioProcess(double cpuRatioProcess) {
    this.cpuRatioProcess = cpuRatioProcess;
    setCpuRatioProcessIsSet(true);
    return this;
  }

  public void unsetCpuRatioProcess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPURATIOPROCESS_ISSET_ID);
  }

  /** Returns true if field cpuRatioProcess is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuRatioProcess() {
    return EncodingUtils.testBit(__isset_bitfield, __CPURATIOPROCESS_ISSET_ID);
  }

  public void setCpuRatioProcessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPURATIOPROCESS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_MEMORY_MACHINE:
      if (value == null) {
        unsetTotalMemoryMachine();
      } else {
        setTotalMemoryMachine((Long)value);
      }
      break;

    case FREE_MEMORY_MACHINE:
      if (value == null) {
        unsetFreeMemoryMachine();
      } else {
        setFreeMemoryMachine((Long)value);
      }
      break;

    case TOTAL_MEMORY_PROCESS:
      if (value == null) {
        unsetTotalMemoryProcess();
      } else {
        setTotalMemoryProcess((Long)value);
      }
      break;

    case FREE_MEMORY_PROCESS:
      if (value == null) {
        unsetFreeMemoryProcess();
      } else {
        setFreeMemoryProcess((Long)value);
      }
      break;

    case TOTAL_THREAD:
      if (value == null) {
        unsetTotalThread();
      } else {
        setTotalThread((Integer)value);
      }
      break;

    case CPU_RATIO_MACHINE:
      if (value == null) {
        unsetCpuRatioMachine();
      } else {
        setCpuRatioMachine((Double)value);
      }
      break;

    case CPU_RATIO_PROCESS:
      if (value == null) {
        unsetCpuRatioProcess();
      } else {
        setCpuRatioProcess((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_MEMORY_MACHINE:
      return Long.valueOf(getTotalMemoryMachine());

    case FREE_MEMORY_MACHINE:
      return Long.valueOf(getFreeMemoryMachine());

    case TOTAL_MEMORY_PROCESS:
      return Long.valueOf(getTotalMemoryProcess());

    case FREE_MEMORY_PROCESS:
      return Long.valueOf(getFreeMemoryProcess());

    case TOTAL_THREAD:
      return Integer.valueOf(getTotalThread());

    case CPU_RATIO_MACHINE:
      return Double.valueOf(getCpuRatioMachine());

    case CPU_RATIO_PROCESS:
      return Double.valueOf(getCpuRatioProcess());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_MEMORY_MACHINE:
      return isSetTotalMemoryMachine();
    case FREE_MEMORY_MACHINE:
      return isSetFreeMemoryMachine();
    case TOTAL_MEMORY_PROCESS:
      return isSetTotalMemoryProcess();
    case FREE_MEMORY_PROCESS:
      return isSetFreeMemoryProcess();
    case TOTAL_THREAD:
      return isSetTotalThread();
    case CPU_RATIO_MACHINE:
      return isSetCpuRatioMachine();
    case CPU_RATIO_PROCESS:
      return isSetCpuRatioProcess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeEnvInfo)
      return this.equals((NodeEnvInfo)that);
    return false;
  }

  public boolean equals(NodeEnvInfo that) {
    if (that == null)
      return false;

    boolean this_present_totalMemoryMachine = true && this.isSetTotalMemoryMachine();
    boolean that_present_totalMemoryMachine = true && that.isSetTotalMemoryMachine();
    if (this_present_totalMemoryMachine || that_present_totalMemoryMachine) {
      if (!(this_present_totalMemoryMachine && that_present_totalMemoryMachine))
        return false;
      if (this.totalMemoryMachine != that.totalMemoryMachine)
        return false;
    }

    boolean this_present_freeMemoryMachine = true && this.isSetFreeMemoryMachine();
    boolean that_present_freeMemoryMachine = true && that.isSetFreeMemoryMachine();
    if (this_present_freeMemoryMachine || that_present_freeMemoryMachine) {
      if (!(this_present_freeMemoryMachine && that_present_freeMemoryMachine))
        return false;
      if (this.freeMemoryMachine != that.freeMemoryMachine)
        return false;
    }

    boolean this_present_totalMemoryProcess = true && this.isSetTotalMemoryProcess();
    boolean that_present_totalMemoryProcess = true && that.isSetTotalMemoryProcess();
    if (this_present_totalMemoryProcess || that_present_totalMemoryProcess) {
      if (!(this_present_totalMemoryProcess && that_present_totalMemoryProcess))
        return false;
      if (this.totalMemoryProcess != that.totalMemoryProcess)
        return false;
    }

    boolean this_present_freeMemoryProcess = true && this.isSetFreeMemoryProcess();
    boolean that_present_freeMemoryProcess = true && that.isSetFreeMemoryProcess();
    if (this_present_freeMemoryProcess || that_present_freeMemoryProcess) {
      if (!(this_present_freeMemoryProcess && that_present_freeMemoryProcess))
        return false;
      if (this.freeMemoryProcess != that.freeMemoryProcess)
        return false;
    }

    boolean this_present_totalThread = true && this.isSetTotalThread();
    boolean that_present_totalThread = true && that.isSetTotalThread();
    if (this_present_totalThread || that_present_totalThread) {
      if (!(this_present_totalThread && that_present_totalThread))
        return false;
      if (this.totalThread != that.totalThread)
        return false;
    }

    boolean this_present_cpuRatioMachine = true && this.isSetCpuRatioMachine();
    boolean that_present_cpuRatioMachine = true && that.isSetCpuRatioMachine();
    if (this_present_cpuRatioMachine || that_present_cpuRatioMachine) {
      if (!(this_present_cpuRatioMachine && that_present_cpuRatioMachine))
        return false;
      if (this.cpuRatioMachine != that.cpuRatioMachine)
        return false;
    }

    boolean this_present_cpuRatioProcess = true && this.isSetCpuRatioProcess();
    boolean that_present_cpuRatioProcess = true && that.isSetCpuRatioProcess();
    if (this_present_cpuRatioProcess || that_present_cpuRatioProcess) {
      if (!(this_present_cpuRatioProcess && that_present_cpuRatioProcess))
        return false;
      if (this.cpuRatioProcess != that.cpuRatioProcess)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_totalMemoryMachine = true && (isSetTotalMemoryMachine());
    list.add(present_totalMemoryMachine);
    if (present_totalMemoryMachine)
      list.add(totalMemoryMachine);

    boolean present_freeMemoryMachine = true && (isSetFreeMemoryMachine());
    list.add(present_freeMemoryMachine);
    if (present_freeMemoryMachine)
      list.add(freeMemoryMachine);

    boolean present_totalMemoryProcess = true && (isSetTotalMemoryProcess());
    list.add(present_totalMemoryProcess);
    if (present_totalMemoryProcess)
      list.add(totalMemoryProcess);

    boolean present_freeMemoryProcess = true && (isSetFreeMemoryProcess());
    list.add(present_freeMemoryProcess);
    if (present_freeMemoryProcess)
      list.add(freeMemoryProcess);

    boolean present_totalThread = true && (isSetTotalThread());
    list.add(present_totalThread);
    if (present_totalThread)
      list.add(totalThread);

    boolean present_cpuRatioMachine = true && (isSetCpuRatioMachine());
    list.add(present_cpuRatioMachine);
    if (present_cpuRatioMachine)
      list.add(cpuRatioMachine);

    boolean present_cpuRatioProcess = true && (isSetCpuRatioProcess());
    list.add(present_cpuRatioProcess);
    if (present_cpuRatioProcess)
      list.add(cpuRatioProcess);

    return list.hashCode();
  }

  @Override
  public int compareTo(NodeEnvInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotalMemoryMachine()).compareTo(other.isSetTotalMemoryMachine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMemoryMachine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMemoryMachine, other.totalMemoryMachine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreeMemoryMachine()).compareTo(other.isSetFreeMemoryMachine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreeMemoryMachine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freeMemoryMachine, other.freeMemoryMachine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMemoryProcess()).compareTo(other.isSetTotalMemoryProcess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMemoryProcess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMemoryProcess, other.totalMemoryProcess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreeMemoryProcess()).compareTo(other.isSetFreeMemoryProcess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreeMemoryProcess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freeMemoryProcess, other.freeMemoryProcess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalThread()).compareTo(other.isSetTotalThread());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalThread()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalThread, other.totalThread);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuRatioMachine()).compareTo(other.isSetCpuRatioMachine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuRatioMachine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuRatioMachine, other.cpuRatioMachine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuRatioProcess()).compareTo(other.isSetCpuRatioProcess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuRatioProcess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuRatioProcess, other.cpuRatioProcess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodeEnvInfo(");
    boolean first = true;

    if (isSetTotalMemoryMachine()) {
      sb.append("totalMemoryMachine:");
      sb.append(this.totalMemoryMachine);
      first = false;
    }
    if (isSetFreeMemoryMachine()) {
      if (!first) sb.append(", ");
      sb.append("freeMemoryMachine:");
      sb.append(this.freeMemoryMachine);
      first = false;
    }
    if (isSetTotalMemoryProcess()) {
      if (!first) sb.append(", ");
      sb.append("totalMemoryProcess:");
      sb.append(this.totalMemoryProcess);
      first = false;
    }
    if (isSetFreeMemoryProcess()) {
      if (!first) sb.append(", ");
      sb.append("freeMemoryProcess:");
      sb.append(this.freeMemoryProcess);
      first = false;
    }
    if (isSetTotalThread()) {
      if (!first) sb.append(", ");
      sb.append("totalThread:");
      sb.append(this.totalThread);
      first = false;
    }
    if (isSetCpuRatioMachine()) {
      if (!first) sb.append(", ");
      sb.append("cpuRatioMachine:");
      sb.append(this.cpuRatioMachine);
      first = false;
    }
    if (isSetCpuRatioProcess()) {
      if (!first) sb.append(", ");
      sb.append("cpuRatioProcess:");
      sb.append(this.cpuRatioProcess);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeEnvInfoStandardSchemeFactory implements SchemeFactory {
    public NodeEnvInfoStandardScheme getScheme() {
      return new NodeEnvInfoStandardScheme();
    }
  }

  private static class NodeEnvInfoStandardScheme extends StandardScheme<NodeEnvInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeEnvInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_MEMORY_MACHINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalMemoryMachine = iprot.readI64();
              struct.setTotalMemoryMachineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FREE_MEMORY_MACHINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.freeMemoryMachine = iprot.readI64();
              struct.setFreeMemoryMachineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_MEMORY_PROCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalMemoryProcess = iprot.readI64();
              struct.setTotalMemoryProcessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FREE_MEMORY_PROCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.freeMemoryProcess = iprot.readI64();
              struct.setFreeMemoryProcessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_THREAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalThread = iprot.readI32();
              struct.setTotalThreadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CPU_RATIO_MACHINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpuRatioMachine = iprot.readDouble();
              struct.setCpuRatioMachineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CPU_RATIO_PROCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpuRatioProcess = iprot.readDouble();
              struct.setCpuRatioProcessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeEnvInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTotalMemoryMachine()) {
        oprot.writeFieldBegin(TOTAL_MEMORY_MACHINE_FIELD_DESC);
        oprot.writeI64(struct.totalMemoryMachine);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFreeMemoryMachine()) {
        oprot.writeFieldBegin(FREE_MEMORY_MACHINE_FIELD_DESC);
        oprot.writeI64(struct.freeMemoryMachine);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalMemoryProcess()) {
        oprot.writeFieldBegin(TOTAL_MEMORY_PROCESS_FIELD_DESC);
        oprot.writeI64(struct.totalMemoryProcess);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFreeMemoryProcess()) {
        oprot.writeFieldBegin(FREE_MEMORY_PROCESS_FIELD_DESC);
        oprot.writeI64(struct.freeMemoryProcess);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalThread()) {
        oprot.writeFieldBegin(TOTAL_THREAD_FIELD_DESC);
        oprot.writeI32(struct.totalThread);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpuRatioMachine()) {
        oprot.writeFieldBegin(CPU_RATIO_MACHINE_FIELD_DESC);
        oprot.writeDouble(struct.cpuRatioMachine);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpuRatioProcess()) {
        oprot.writeFieldBegin(CPU_RATIO_PROCESS_FIELD_DESC);
        oprot.writeDouble(struct.cpuRatioProcess);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeEnvInfoTupleSchemeFactory implements SchemeFactory {
    public NodeEnvInfoTupleScheme getScheme() {
      return new NodeEnvInfoTupleScheme();
    }
  }

  private static class NodeEnvInfoTupleScheme extends TupleScheme<NodeEnvInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeEnvInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotalMemoryMachine()) {
        optionals.set(0);
      }
      if (struct.isSetFreeMemoryMachine()) {
        optionals.set(1);
      }
      if (struct.isSetTotalMemoryProcess()) {
        optionals.set(2);
      }
      if (struct.isSetFreeMemoryProcess()) {
        optionals.set(3);
      }
      if (struct.isSetTotalThread()) {
        optionals.set(4);
      }
      if (struct.isSetCpuRatioMachine()) {
        optionals.set(5);
      }
      if (struct.isSetCpuRatioProcess()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTotalMemoryMachine()) {
        oprot.writeI64(struct.totalMemoryMachine);
      }
      if (struct.isSetFreeMemoryMachine()) {
        oprot.writeI64(struct.freeMemoryMachine);
      }
      if (struct.isSetTotalMemoryProcess()) {
        oprot.writeI64(struct.totalMemoryProcess);
      }
      if (struct.isSetFreeMemoryProcess()) {
        oprot.writeI64(struct.freeMemoryProcess);
      }
      if (struct.isSetTotalThread()) {
        oprot.writeI32(struct.totalThread);
      }
      if (struct.isSetCpuRatioMachine()) {
        oprot.writeDouble(struct.cpuRatioMachine);
      }
      if (struct.isSetCpuRatioProcess()) {
        oprot.writeDouble(struct.cpuRatioProcess);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeEnvInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.totalMemoryMachine = iprot.readI64();
        struct.setTotalMemoryMachineIsSet(true);
      }
      if (incoming.get(1)) {
        struct.freeMemoryMachine = iprot.readI64();
        struct.setFreeMemoryMachineIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalMemoryProcess = iprot.readI64();
        struct.setTotalMemoryProcessIsSet(true);
      }
      if (incoming.get(3)) {
        struct.freeMemoryProcess = iprot.readI64();
        struct.setFreeMemoryProcessIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalThread = iprot.readI32();
        struct.setTotalThreadIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cpuRatioMachine = iprot.readDouble();
        struct.setCpuRatioMachineIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cpuRatioProcess = iprot.readDouble();
        struct.setCpuRatioProcessIsSet(true);
      }
    }
  }

}

