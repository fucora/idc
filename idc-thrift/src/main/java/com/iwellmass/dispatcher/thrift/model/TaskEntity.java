/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.iwellmass.dispatcher.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-30")
public class TaskEntity implements org.apache.thrift.TBase<TaskEntity, TaskEntity._Fields>, java.io.Serializable, Cloneable, Comparable<TaskEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskEntity");

  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dataLimit", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField WORKFLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EXECUTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executeId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DISPATCH_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("dispatchCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField WORKFLOW_EXECUTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowExecuteId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField EXECUTE_BATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executeBatchId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField THREAD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("threadCount", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField NEED_RETRY_FIELD_DESC = new org.apache.thrift.protocol.TField("needRetry", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField RETRY_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("retryTimes", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CURRENT_RETRY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("currentRetryTime", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField RETRY_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("retryInterval", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField FIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fireTime", org.apache.thrift.protocol.TType.I64, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskEntityTupleSchemeFactory());
  }

  public int appId; // required
  public String className; // required
  public String parameters; // optional
  public int dataLimit; // optional
  public int taskId; // required
  public int workflowId; // optional
  public long executeId; // required
  public int dispatchCount; // required
  public long workflowExecuteId; // optional
  public String executeBatchId; // required
  public int threadCount; // required
  public boolean needRetry; // required
  public int retryTimes; // optional
  public int currentRetryTime; // optional
  public long retryInterval; // optional
  public long fireTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_ID((short)1, "appId"),
    CLASS_NAME((short)2, "className"),
    PARAMETERS((short)3, "parameters"),
    DATA_LIMIT((short)4, "dataLimit"),
    TASK_ID((short)5, "taskId"),
    WORKFLOW_ID((short)6, "workflowId"),
    EXECUTE_ID((short)7, "executeId"),
    DISPATCH_COUNT((short)8, "dispatchCount"),
    WORKFLOW_EXECUTE_ID((short)9, "workflowExecuteId"),
    EXECUTE_BATCH_ID((short)10, "executeBatchId"),
    THREAD_COUNT((short)11, "threadCount"),
    NEED_RETRY((short)12, "needRetry"),
    RETRY_TIMES((short)13, "retryTimes"),
    CURRENT_RETRY_TIME((short)14, "currentRetryTime"),
    RETRY_INTERVAL((short)15, "retryInterval"),
    FIRE_TIME((short)16, "fireTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_ID
          return APP_ID;
        case 2: // CLASS_NAME
          return CLASS_NAME;
        case 3: // PARAMETERS
          return PARAMETERS;
        case 4: // DATA_LIMIT
          return DATA_LIMIT;
        case 5: // TASK_ID
          return TASK_ID;
        case 6: // WORKFLOW_ID
          return WORKFLOW_ID;
        case 7: // EXECUTE_ID
          return EXECUTE_ID;
        case 8: // DISPATCH_COUNT
          return DISPATCH_COUNT;
        case 9: // WORKFLOW_EXECUTE_ID
          return WORKFLOW_EXECUTE_ID;
        case 10: // EXECUTE_BATCH_ID
          return EXECUTE_BATCH_ID;
        case 11: // THREAD_COUNT
          return THREAD_COUNT;
        case 12: // NEED_RETRY
          return NEED_RETRY;
        case 13: // RETRY_TIMES
          return RETRY_TIMES;
        case 14: // CURRENT_RETRY_TIME
          return CURRENT_RETRY_TIME;
        case 15: // RETRY_INTERVAL
          return RETRY_INTERVAL;
        case 16: // FIRE_TIME
          return FIRE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPID_ISSET_ID = 0;
  private static final int __DATALIMIT_ISSET_ID = 1;
  private static final int __TASKID_ISSET_ID = 2;
  private static final int __WORKFLOWID_ISSET_ID = 3;
  private static final int __EXECUTEID_ISSET_ID = 4;
  private static final int __DISPATCHCOUNT_ISSET_ID = 5;
  private static final int __WORKFLOWEXECUTEID_ISSET_ID = 6;
  private static final int __THREADCOUNT_ISSET_ID = 7;
  private static final int __NEEDRETRY_ISSET_ID = 8;
  private static final int __RETRYTIMES_ISSET_ID = 9;
  private static final int __CURRENTRETRYTIME_ISSET_ID = 10;
  private static final int __RETRYINTERVAL_ISSET_ID = 11;
  private static final int __FIRETIME_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARAMETERS,_Fields.DATA_LIMIT,_Fields.WORKFLOW_ID,_Fields.WORKFLOW_EXECUTE_ID,_Fields.RETRY_TIMES,_Fields.CURRENT_RETRY_TIME,_Fields.RETRY_INTERVAL,_Fields.FIRE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("dataLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKFLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("workflowId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXECUTE_ID, new org.apache.thrift.meta_data.FieldMetaData("executeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISPATCH_COUNT, new org.apache.thrift.meta_data.FieldMetaData("dispatchCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKFLOW_EXECUTE_ID, new org.apache.thrift.meta_data.FieldMetaData("workflowExecuteId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXECUTE_BATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("executeBatchId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THREAD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("threadCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEED_RETRY, new org.apache.thrift.meta_data.FieldMetaData("needRetry", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RETRY_TIMES, new org.apache.thrift.meta_data.FieldMetaData("retryTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_RETRY_TIME, new org.apache.thrift.meta_data.FieldMetaData("currentRetryTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETRY_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("retryInterval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("fireTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskEntity.class, metaDataMap);
  }

  public TaskEntity() {
  }

  public TaskEntity(
    int appId,
    String className,
    int taskId,
    long executeId,
    int dispatchCount,
    String executeBatchId,
    int threadCount,
    boolean needRetry)
  {
    this();
    this.appId = appId;
    setAppIdIsSet(true);
    this.className = className;
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.executeId = executeId;
    setExecuteIdIsSet(true);
    this.dispatchCount = dispatchCount;
    setDispatchCountIsSet(true);
    this.executeBatchId = executeBatchId;
    this.threadCount = threadCount;
    setThreadCountIsSet(true);
    this.needRetry = needRetry;
    setNeedRetryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskEntity(TaskEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.appId = other.appId;
    if (other.isSetClassName()) {
      this.className = other.className;
    }
    if (other.isSetParameters()) {
      this.parameters = other.parameters;
    }
    this.dataLimit = other.dataLimit;
    this.taskId = other.taskId;
    this.workflowId = other.workflowId;
    this.executeId = other.executeId;
    this.dispatchCount = other.dispatchCount;
    this.workflowExecuteId = other.workflowExecuteId;
    if (other.isSetExecuteBatchId()) {
      this.executeBatchId = other.executeBatchId;
    }
    this.threadCount = other.threadCount;
    this.needRetry = other.needRetry;
    this.retryTimes = other.retryTimes;
    this.currentRetryTime = other.currentRetryTime;
    this.retryInterval = other.retryInterval;
    this.fireTime = other.fireTime;
  }

  public TaskEntity deepCopy() {
    return new TaskEntity(this);
  }

  @Override
  public void clear() {
    setAppIdIsSet(false);
    this.appId = 0;
    this.className = null;
    this.parameters = null;
    setDataLimitIsSet(false);
    this.dataLimit = 0;
    setTaskIdIsSet(false);
    this.taskId = 0;
    setWorkflowIdIsSet(false);
    this.workflowId = 0;
    setExecuteIdIsSet(false);
    this.executeId = 0;
    setDispatchCountIsSet(false);
    this.dispatchCount = 0;
    setWorkflowExecuteIdIsSet(false);
    this.workflowExecuteId = 0;
    this.executeBatchId = null;
    setThreadCountIsSet(false);
    this.threadCount = 0;
    setNeedRetryIsSet(false);
    this.needRetry = false;
    setRetryTimesIsSet(false);
    this.retryTimes = 0;
    setCurrentRetryTimeIsSet(false);
    this.currentRetryTime = 0;
    setRetryIntervalIsSet(false);
    this.retryInterval = 0;
    setFireTimeIsSet(false);
    this.fireTime = 0;
  }

  public int getAppId() {
    return this.appId;
  }

  public TaskEntity setAppId(int appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public String getClassName() {
    return this.className;
  }

  public TaskEntity setClassName(String className) {
    this.className = className;
    return this;
  }

  public void unsetClassName() {
    this.className = null;
  }

  /** Returns true if field className is set (has been assigned a value) and false otherwise */
  public boolean isSetClassName() {
    return this.className != null;
  }

  public void setClassNameIsSet(boolean value) {
    if (!value) {
      this.className = null;
    }
  }

  public String getParameters() {
    return this.parameters;
  }

  public TaskEntity setParameters(String parameters) {
    this.parameters = parameters;
    return this;
  }

  public void unsetParameters() {
    this.parameters = null;
  }

  /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.parameters = null;
    }
  }

  public int getDataLimit() {
    return this.dataLimit;
  }

  public TaskEntity setDataLimit(int dataLimit) {
    this.dataLimit = dataLimit;
    setDataLimitIsSet(true);
    return this;
  }

  public void unsetDataLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATALIMIT_ISSET_ID);
  }

  /** Returns true if field dataLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetDataLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __DATALIMIT_ISSET_ID);
  }

  public void setDataLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATALIMIT_ISSET_ID, value);
  }

  public int getTaskId() {
    return this.taskId;
  }

  public TaskEntity setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getWorkflowId() {
    return this.workflowId;
  }

  public TaskEntity setWorkflowId(int workflowId) {
    this.workflowId = workflowId;
    setWorkflowIdIsSet(true);
    return this;
  }

  public void unsetWorkflowId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKFLOWID_ISSET_ID);
  }

  /** Returns true if field workflowId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowId() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKFLOWID_ISSET_ID);
  }

  public void setWorkflowIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKFLOWID_ISSET_ID, value);
  }

  public long getExecuteId() {
    return this.executeId;
  }

  public TaskEntity setExecuteId(long executeId) {
    this.executeId = executeId;
    setExecuteIdIsSet(true);
    return this;
  }

  public void unsetExecuteId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECUTEID_ISSET_ID);
  }

  /** Returns true if field executeId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECUTEID_ISSET_ID);
  }

  public void setExecuteIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECUTEID_ISSET_ID, value);
  }

  public int getDispatchCount() {
    return this.dispatchCount;
  }

  public TaskEntity setDispatchCount(int dispatchCount) {
    this.dispatchCount = dispatchCount;
    setDispatchCountIsSet(true);
    return this;
  }

  public void unsetDispatchCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISPATCHCOUNT_ISSET_ID);
  }

  /** Returns true if field dispatchCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDispatchCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DISPATCHCOUNT_ISSET_ID);
  }

  public void setDispatchCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISPATCHCOUNT_ISSET_ID, value);
  }

  public long getWorkflowExecuteId() {
    return this.workflowExecuteId;
  }

  public TaskEntity setWorkflowExecuteId(long workflowExecuteId) {
    this.workflowExecuteId = workflowExecuteId;
    setWorkflowExecuteIdIsSet(true);
    return this;
  }

  public void unsetWorkflowExecuteId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKFLOWEXECUTEID_ISSET_ID);
  }

  /** Returns true if field workflowExecuteId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowExecuteId() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKFLOWEXECUTEID_ISSET_ID);
  }

  public void setWorkflowExecuteIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKFLOWEXECUTEID_ISSET_ID, value);
  }

  public String getExecuteBatchId() {
    return this.executeBatchId;
  }

  public TaskEntity setExecuteBatchId(String executeBatchId) {
    this.executeBatchId = executeBatchId;
    return this;
  }

  public void unsetExecuteBatchId() {
    this.executeBatchId = null;
  }

  /** Returns true if field executeBatchId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteBatchId() {
    return this.executeBatchId != null;
  }

  public void setExecuteBatchIdIsSet(boolean value) {
    if (!value) {
      this.executeBatchId = null;
    }
  }

  public int getThreadCount() {
    return this.threadCount;
  }

  public TaskEntity setThreadCount(int threadCount) {
    this.threadCount = threadCount;
    setThreadCountIsSet(true);
    return this;
  }

  public void unsetThreadCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREADCOUNT_ISSET_ID);
  }

  /** Returns true if field threadCount is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadCount() {
    return EncodingUtils.testBit(__isset_bitfield, __THREADCOUNT_ISSET_ID);
  }

  public void setThreadCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREADCOUNT_ISSET_ID, value);
  }

  public boolean isNeedRetry() {
    return this.needRetry;
  }

  public TaskEntity setNeedRetry(boolean needRetry) {
    this.needRetry = needRetry;
    setNeedRetryIsSet(true);
    return this;
  }

  public void unsetNeedRetry() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDRETRY_ISSET_ID);
  }

  /** Returns true if field needRetry is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedRetry() {
    return EncodingUtils.testBit(__isset_bitfield, __NEEDRETRY_ISSET_ID);
  }

  public void setNeedRetryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDRETRY_ISSET_ID, value);
  }

  public int getRetryTimes() {
    return this.retryTimes;
  }

  public TaskEntity setRetryTimes(int retryTimes) {
    this.retryTimes = retryTimes;
    setRetryTimesIsSet(true);
    return this;
  }

  public void unsetRetryTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETRYTIMES_ISSET_ID);
  }

  /** Returns true if field retryTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetRetryTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __RETRYTIMES_ISSET_ID);
  }

  public void setRetryTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETRYTIMES_ISSET_ID, value);
  }

  public int getCurrentRetryTime() {
    return this.currentRetryTime;
  }

  public TaskEntity setCurrentRetryTime(int currentRetryTime) {
    this.currentRetryTime = currentRetryTime;
    setCurrentRetryTimeIsSet(true);
    return this;
  }

  public void unsetCurrentRetryTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTRETRYTIME_ISSET_ID);
  }

  /** Returns true if field currentRetryTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentRetryTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTRETRYTIME_ISSET_ID);
  }

  public void setCurrentRetryTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTRETRYTIME_ISSET_ID, value);
  }

  public long getRetryInterval() {
    return this.retryInterval;
  }

  public TaskEntity setRetryInterval(long retryInterval) {
    this.retryInterval = retryInterval;
    setRetryIntervalIsSet(true);
    return this;
  }

  public void unsetRetryInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETRYINTERVAL_ISSET_ID);
  }

  /** Returns true if field retryInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetRetryInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __RETRYINTERVAL_ISSET_ID);
  }

  public void setRetryIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETRYINTERVAL_ISSET_ID, value);
  }

  public long getFireTime() {
    return this.fireTime;
  }

  public TaskEntity setFireTime(long fireTime) {
    this.fireTime = fireTime;
    setFireTimeIsSet(true);
    return this;
  }

  public void unsetFireTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRETIME_ISSET_ID);
  }

  /** Returns true if field fireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFireTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRETIME_ISSET_ID);
  }

  public void setFireTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Integer)value);
      }
      break;

    case CLASS_NAME:
      if (value == null) {
        unsetClassName();
      } else {
        setClassName((String)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((String)value);
      }
      break;

    case DATA_LIMIT:
      if (value == null) {
        unsetDataLimit();
      } else {
        setDataLimit((Integer)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case WORKFLOW_ID:
      if (value == null) {
        unsetWorkflowId();
      } else {
        setWorkflowId((Integer)value);
      }
      break;

    case EXECUTE_ID:
      if (value == null) {
        unsetExecuteId();
      } else {
        setExecuteId((Long)value);
      }
      break;

    case DISPATCH_COUNT:
      if (value == null) {
        unsetDispatchCount();
      } else {
        setDispatchCount((Integer)value);
      }
      break;

    case WORKFLOW_EXECUTE_ID:
      if (value == null) {
        unsetWorkflowExecuteId();
      } else {
        setWorkflowExecuteId((Long)value);
      }
      break;

    case EXECUTE_BATCH_ID:
      if (value == null) {
        unsetExecuteBatchId();
      } else {
        setExecuteBatchId((String)value);
      }
      break;

    case THREAD_COUNT:
      if (value == null) {
        unsetThreadCount();
      } else {
        setThreadCount((Integer)value);
      }
      break;

    case NEED_RETRY:
      if (value == null) {
        unsetNeedRetry();
      } else {
        setNeedRetry((Boolean)value);
      }
      break;

    case RETRY_TIMES:
      if (value == null) {
        unsetRetryTimes();
      } else {
        setRetryTimes((Integer)value);
      }
      break;

    case CURRENT_RETRY_TIME:
      if (value == null) {
        unsetCurrentRetryTime();
      } else {
        setCurrentRetryTime((Integer)value);
      }
      break;

    case RETRY_INTERVAL:
      if (value == null) {
        unsetRetryInterval();
      } else {
        setRetryInterval((Long)value);
      }
      break;

    case FIRE_TIME:
      if (value == null) {
        unsetFireTime();
      } else {
        setFireTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_ID:
      return Integer.valueOf(getAppId());

    case CLASS_NAME:
      return getClassName();

    case PARAMETERS:
      return getParameters();

    case DATA_LIMIT:
      return Integer.valueOf(getDataLimit());

    case TASK_ID:
      return Integer.valueOf(getTaskId());

    case WORKFLOW_ID:
      return Integer.valueOf(getWorkflowId());

    case EXECUTE_ID:
      return Long.valueOf(getExecuteId());

    case DISPATCH_COUNT:
      return Integer.valueOf(getDispatchCount());

    case WORKFLOW_EXECUTE_ID:
      return Long.valueOf(getWorkflowExecuteId());

    case EXECUTE_BATCH_ID:
      return getExecuteBatchId();

    case THREAD_COUNT:
      return Integer.valueOf(getThreadCount());

    case NEED_RETRY:
      return Boolean.valueOf(isNeedRetry());

    case RETRY_TIMES:
      return Integer.valueOf(getRetryTimes());

    case CURRENT_RETRY_TIME:
      return Integer.valueOf(getCurrentRetryTime());

    case RETRY_INTERVAL:
      return Long.valueOf(getRetryInterval());

    case FIRE_TIME:
      return Long.valueOf(getFireTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_ID:
      return isSetAppId();
    case CLASS_NAME:
      return isSetClassName();
    case PARAMETERS:
      return isSetParameters();
    case DATA_LIMIT:
      return isSetDataLimit();
    case TASK_ID:
      return isSetTaskId();
    case WORKFLOW_ID:
      return isSetWorkflowId();
    case EXECUTE_ID:
      return isSetExecuteId();
    case DISPATCH_COUNT:
      return isSetDispatchCount();
    case WORKFLOW_EXECUTE_ID:
      return isSetWorkflowExecuteId();
    case EXECUTE_BATCH_ID:
      return isSetExecuteBatchId();
    case THREAD_COUNT:
      return isSetThreadCount();
    case NEED_RETRY:
      return isSetNeedRetry();
    case RETRY_TIMES:
      return isSetRetryTimes();
    case CURRENT_RETRY_TIME:
      return isSetCurrentRetryTime();
    case RETRY_INTERVAL:
      return isSetRetryInterval();
    case FIRE_TIME:
      return isSetFireTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskEntity)
      return this.equals((TaskEntity)that);
    return false;
  }

  public boolean equals(TaskEntity that) {
    if (that == null)
      return false;

    boolean this_present_appId = true;
    boolean that_present_appId = true;
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_className = true && this.isSetClassName();
    boolean that_present_className = true && that.isSetClassName();
    if (this_present_className || that_present_className) {
      if (!(this_present_className && that_present_className))
        return false;
      if (!this.className.equals(that.className))
        return false;
    }

    boolean this_present_parameters = true && this.isSetParameters();
    boolean that_present_parameters = true && that.isSetParameters();
    if (this_present_parameters || that_present_parameters) {
      if (!(this_present_parameters && that_present_parameters))
        return false;
      if (!this.parameters.equals(that.parameters))
        return false;
    }

    boolean this_present_dataLimit = true && this.isSetDataLimit();
    boolean that_present_dataLimit = true && that.isSetDataLimit();
    if (this_present_dataLimit || that_present_dataLimit) {
      if (!(this_present_dataLimit && that_present_dataLimit))
        return false;
      if (this.dataLimit != that.dataLimit)
        return false;
    }

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_workflowId = true && this.isSetWorkflowId();
    boolean that_present_workflowId = true && that.isSetWorkflowId();
    if (this_present_workflowId || that_present_workflowId) {
      if (!(this_present_workflowId && that_present_workflowId))
        return false;
      if (this.workflowId != that.workflowId)
        return false;
    }

    boolean this_present_executeId = true;
    boolean that_present_executeId = true;
    if (this_present_executeId || that_present_executeId) {
      if (!(this_present_executeId && that_present_executeId))
        return false;
      if (this.executeId != that.executeId)
        return false;
    }

    boolean this_present_dispatchCount = true;
    boolean that_present_dispatchCount = true;
    if (this_present_dispatchCount || that_present_dispatchCount) {
      if (!(this_present_dispatchCount && that_present_dispatchCount))
        return false;
      if (this.dispatchCount != that.dispatchCount)
        return false;
    }

    boolean this_present_workflowExecuteId = true && this.isSetWorkflowExecuteId();
    boolean that_present_workflowExecuteId = true && that.isSetWorkflowExecuteId();
    if (this_present_workflowExecuteId || that_present_workflowExecuteId) {
      if (!(this_present_workflowExecuteId && that_present_workflowExecuteId))
        return false;
      if (this.workflowExecuteId != that.workflowExecuteId)
        return false;
    }

    boolean this_present_executeBatchId = true && this.isSetExecuteBatchId();
    boolean that_present_executeBatchId = true && that.isSetExecuteBatchId();
    if (this_present_executeBatchId || that_present_executeBatchId) {
      if (!(this_present_executeBatchId && that_present_executeBatchId))
        return false;
      if (!this.executeBatchId.equals(that.executeBatchId))
        return false;
    }

    boolean this_present_threadCount = true;
    boolean that_present_threadCount = true;
    if (this_present_threadCount || that_present_threadCount) {
      if (!(this_present_threadCount && that_present_threadCount))
        return false;
      if (this.threadCount != that.threadCount)
        return false;
    }

    boolean this_present_needRetry = true;
    boolean that_present_needRetry = true;
    if (this_present_needRetry || that_present_needRetry) {
      if (!(this_present_needRetry && that_present_needRetry))
        return false;
      if (this.needRetry != that.needRetry)
        return false;
    }

    boolean this_present_retryTimes = true && this.isSetRetryTimes();
    boolean that_present_retryTimes = true && that.isSetRetryTimes();
    if (this_present_retryTimes || that_present_retryTimes) {
      if (!(this_present_retryTimes && that_present_retryTimes))
        return false;
      if (this.retryTimes != that.retryTimes)
        return false;
    }

    boolean this_present_currentRetryTime = true && this.isSetCurrentRetryTime();
    boolean that_present_currentRetryTime = true && that.isSetCurrentRetryTime();
    if (this_present_currentRetryTime || that_present_currentRetryTime) {
      if (!(this_present_currentRetryTime && that_present_currentRetryTime))
        return false;
      if (this.currentRetryTime != that.currentRetryTime)
        return false;
    }

    boolean this_present_retryInterval = true && this.isSetRetryInterval();
    boolean that_present_retryInterval = true && that.isSetRetryInterval();
    if (this_present_retryInterval || that_present_retryInterval) {
      if (!(this_present_retryInterval && that_present_retryInterval))
        return false;
      if (this.retryInterval != that.retryInterval)
        return false;
    }

    boolean this_present_fireTime = true && this.isSetFireTime();
    boolean that_present_fireTime = true && that.isSetFireTime();
    if (this_present_fireTime || that_present_fireTime) {
      if (!(this_present_fireTime && that_present_fireTime))
        return false;
      if (this.fireTime != that.fireTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_appId = true;
    list.add(present_appId);
    if (present_appId)
      list.add(appId);

    boolean present_className = true && (isSetClassName());
    list.add(present_className);
    if (present_className)
      list.add(className);

    boolean present_parameters = true && (isSetParameters());
    list.add(present_parameters);
    if (present_parameters)
      list.add(parameters);

    boolean present_dataLimit = true && (isSetDataLimit());
    list.add(present_dataLimit);
    if (present_dataLimit)
      list.add(dataLimit);

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_workflowId = true && (isSetWorkflowId());
    list.add(present_workflowId);
    if (present_workflowId)
      list.add(workflowId);

    boolean present_executeId = true;
    list.add(present_executeId);
    if (present_executeId)
      list.add(executeId);

    boolean present_dispatchCount = true;
    list.add(present_dispatchCount);
    if (present_dispatchCount)
      list.add(dispatchCount);

    boolean present_workflowExecuteId = true && (isSetWorkflowExecuteId());
    list.add(present_workflowExecuteId);
    if (present_workflowExecuteId)
      list.add(workflowExecuteId);

    boolean present_executeBatchId = true && (isSetExecuteBatchId());
    list.add(present_executeBatchId);
    if (present_executeBatchId)
      list.add(executeBatchId);

    boolean present_threadCount = true;
    list.add(present_threadCount);
    if (present_threadCount)
      list.add(threadCount);

    boolean present_needRetry = true;
    list.add(present_needRetry);
    if (present_needRetry)
      list.add(needRetry);

    boolean present_retryTimes = true && (isSetRetryTimes());
    list.add(present_retryTimes);
    if (present_retryTimes)
      list.add(retryTimes);

    boolean present_currentRetryTime = true && (isSetCurrentRetryTime());
    list.add(present_currentRetryTime);
    if (present_currentRetryTime)
      list.add(currentRetryTime);

    boolean present_retryInterval = true && (isSetRetryInterval());
    list.add(present_retryInterval);
    if (present_retryInterval)
      list.add(retryInterval);

    boolean present_fireTime = true && (isSetFireTime());
    list.add(present_fireTime);
    if (present_fireTime)
      list.add(fireTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(TaskEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassName()).compareTo(other.isSetClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, other.className);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataLimit()).compareTo(other.isSetDataLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataLimit, other.dataLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowId()).compareTo(other.isSetWorkflowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowId, other.workflowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuteId()).compareTo(other.isSetExecuteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeId, other.executeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDispatchCount()).compareTo(other.isSetDispatchCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDispatchCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dispatchCount, other.dispatchCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowExecuteId()).compareTo(other.isSetWorkflowExecuteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowExecuteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowExecuteId, other.workflowExecuteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuteBatchId()).compareTo(other.isSetExecuteBatchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteBatchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeBatchId, other.executeBatchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreadCount()).compareTo(other.isSetThreadCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadCount, other.threadCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedRetry()).compareTo(other.isSetNeedRetry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedRetry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needRetry, other.needRetry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetryTimes()).compareTo(other.isSetRetryTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetryTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retryTimes, other.retryTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentRetryTime()).compareTo(other.isSetCurrentRetryTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentRetryTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentRetryTime, other.currentRetryTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetryInterval()).compareTo(other.isSetRetryInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetryInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retryInterval, other.retryInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFireTime()).compareTo(other.isSetFireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fireTime, other.fireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskEntity(");
    boolean first = true;

    sb.append("appId:");
    sb.append(this.appId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("className:");
    if (this.className == null) {
      sb.append("null");
    } else {
      sb.append(this.className);
    }
    first = false;
    if (isSetParameters()) {
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
    }
    if (isSetDataLimit()) {
      if (!first) sb.append(", ");
      sb.append("dataLimit:");
      sb.append(this.dataLimit);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (isSetWorkflowId()) {
      if (!first) sb.append(", ");
      sb.append("workflowId:");
      sb.append(this.workflowId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("executeId:");
    sb.append(this.executeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dispatchCount:");
    sb.append(this.dispatchCount);
    first = false;
    if (isSetWorkflowExecuteId()) {
      if (!first) sb.append(", ");
      sb.append("workflowExecuteId:");
      sb.append(this.workflowExecuteId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("executeBatchId:");
    if (this.executeBatchId == null) {
      sb.append("null");
    } else {
      sb.append(this.executeBatchId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadCount:");
    sb.append(this.threadCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("needRetry:");
    sb.append(this.needRetry);
    first = false;
    if (isSetRetryTimes()) {
      if (!first) sb.append(", ");
      sb.append("retryTimes:");
      sb.append(this.retryTimes);
      first = false;
    }
    if (isSetCurrentRetryTime()) {
      if (!first) sb.append(", ");
      sb.append("currentRetryTime:");
      sb.append(this.currentRetryTime);
      first = false;
    }
    if (isSetRetryInterval()) {
      if (!first) sb.append(", ");
      sb.append("retryInterval:");
      sb.append(this.retryInterval);
      first = false;
    }
    if (isSetFireTime()) {
      if (!first) sb.append(", ");
      sb.append("fireTime:");
      sb.append(this.fireTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'appId' because it's a primitive and you chose the non-beans generator.
    if (className == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'className' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'taskId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'executeId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dispatchCount' because it's a primitive and you chose the non-beans generator.
    if (executeBatchId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executeBatchId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'threadCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'needRetry' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskEntityStandardSchemeFactory implements SchemeFactory {
    public TaskEntityStandardScheme getScheme() {
      return new TaskEntityStandardScheme();
    }
  }

  private static class TaskEntityStandardScheme extends StandardScheme<TaskEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appId = iprot.readI32();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.className = iprot.readString();
              struct.setClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parameters = iprot.readString();
              struct.setParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataLimit = iprot.readI32();
              struct.setDataLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WORKFLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workflowId = iprot.readI32();
              struct.setWorkflowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXECUTE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.executeId = iprot.readI64();
              struct.setExecuteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DISPATCH_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dispatchCount = iprot.readI32();
              struct.setDispatchCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WORKFLOW_EXECUTE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.workflowExecuteId = iprot.readI64();
              struct.setWorkflowExecuteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXECUTE_BATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executeBatchId = iprot.readString();
              struct.setExecuteBatchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // THREAD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.threadCount = iprot.readI32();
              struct.setThreadCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NEED_RETRY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.needRetry = iprot.readBool();
              struct.setNeedRetryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RETRY_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retryTimes = iprot.readI32();
              struct.setRetryTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CURRENT_RETRY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentRetryTime = iprot.readI32();
              struct.setCurrentRetryTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RETRY_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.retryInterval = iprot.readI64();
              struct.setRetryIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fireTime = iprot.readI64();
              struct.setFireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAppId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTaskId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetExecuteId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'executeId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDispatchCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dispatchCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetThreadCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'threadCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNeedRetry()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'needRetry' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(APP_ID_FIELD_DESC);
      oprot.writeI32(struct.appId);
      oprot.writeFieldEnd();
      if (struct.className != null) {
        oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
        oprot.writeString(struct.className);
        oprot.writeFieldEnd();
      }
      if (struct.parameters != null) {
        if (struct.isSetParameters()) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          oprot.writeString(struct.parameters);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDataLimit()) {
        oprot.writeFieldBegin(DATA_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.dataLimit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.taskId);
      oprot.writeFieldEnd();
      if (struct.isSetWorkflowId()) {
        oprot.writeFieldBegin(WORKFLOW_ID_FIELD_DESC);
        oprot.writeI32(struct.workflowId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXECUTE_ID_FIELD_DESC);
      oprot.writeI64(struct.executeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISPATCH_COUNT_FIELD_DESC);
      oprot.writeI32(struct.dispatchCount);
      oprot.writeFieldEnd();
      if (struct.isSetWorkflowExecuteId()) {
        oprot.writeFieldBegin(WORKFLOW_EXECUTE_ID_FIELD_DESC);
        oprot.writeI64(struct.workflowExecuteId);
        oprot.writeFieldEnd();
      }
      if (struct.executeBatchId != null) {
        oprot.writeFieldBegin(EXECUTE_BATCH_ID_FIELD_DESC);
        oprot.writeString(struct.executeBatchId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(THREAD_COUNT_FIELD_DESC);
      oprot.writeI32(struct.threadCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEED_RETRY_FIELD_DESC);
      oprot.writeBool(struct.needRetry);
      oprot.writeFieldEnd();
      if (struct.isSetRetryTimes()) {
        oprot.writeFieldBegin(RETRY_TIMES_FIELD_DESC);
        oprot.writeI32(struct.retryTimes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurrentRetryTime()) {
        oprot.writeFieldBegin(CURRENT_RETRY_TIME_FIELD_DESC);
        oprot.writeI32(struct.currentRetryTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRetryInterval()) {
        oprot.writeFieldBegin(RETRY_INTERVAL_FIELD_DESC);
        oprot.writeI64(struct.retryInterval);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFireTime()) {
        oprot.writeFieldBegin(FIRE_TIME_FIELD_DESC);
        oprot.writeI64(struct.fireTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskEntityTupleSchemeFactory implements SchemeFactory {
    public TaskEntityTupleScheme getScheme() {
      return new TaskEntityTupleScheme();
    }
  }

  private static class TaskEntityTupleScheme extends TupleScheme<TaskEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.appId);
      oprot.writeString(struct.className);
      oprot.writeI32(struct.taskId);
      oprot.writeI64(struct.executeId);
      oprot.writeI32(struct.dispatchCount);
      oprot.writeString(struct.executeBatchId);
      oprot.writeI32(struct.threadCount);
      oprot.writeBool(struct.needRetry);
      BitSet optionals = new BitSet();
      if (struct.isSetParameters()) {
        optionals.set(0);
      }
      if (struct.isSetDataLimit()) {
        optionals.set(1);
      }
      if (struct.isSetWorkflowId()) {
        optionals.set(2);
      }
      if (struct.isSetWorkflowExecuteId()) {
        optionals.set(3);
      }
      if (struct.isSetRetryTimes()) {
        optionals.set(4);
      }
      if (struct.isSetCurrentRetryTime()) {
        optionals.set(5);
      }
      if (struct.isSetRetryInterval()) {
        optionals.set(6);
      }
      if (struct.isSetFireTime()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetParameters()) {
        oprot.writeString(struct.parameters);
      }
      if (struct.isSetDataLimit()) {
        oprot.writeI32(struct.dataLimit);
      }
      if (struct.isSetWorkflowId()) {
        oprot.writeI32(struct.workflowId);
      }
      if (struct.isSetWorkflowExecuteId()) {
        oprot.writeI64(struct.workflowExecuteId);
      }
      if (struct.isSetRetryTimes()) {
        oprot.writeI32(struct.retryTimes);
      }
      if (struct.isSetCurrentRetryTime()) {
        oprot.writeI32(struct.currentRetryTime);
      }
      if (struct.isSetRetryInterval()) {
        oprot.writeI64(struct.retryInterval);
      }
      if (struct.isSetFireTime()) {
        oprot.writeI64(struct.fireTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.appId = iprot.readI32();
      struct.setAppIdIsSet(true);
      struct.className = iprot.readString();
      struct.setClassNameIsSet(true);
      struct.taskId = iprot.readI32();
      struct.setTaskIdIsSet(true);
      struct.executeId = iprot.readI64();
      struct.setExecuteIdIsSet(true);
      struct.dispatchCount = iprot.readI32();
      struct.setDispatchCountIsSet(true);
      struct.executeBatchId = iprot.readString();
      struct.setExecuteBatchIdIsSet(true);
      struct.threadCount = iprot.readI32();
      struct.setThreadCountIsSet(true);
      struct.needRetry = iprot.readBool();
      struct.setNeedRetryIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.parameters = iprot.readString();
        struct.setParametersIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dataLimit = iprot.readI32();
        struct.setDataLimitIsSet(true);
      }
      if (incoming.get(2)) {
        struct.workflowId = iprot.readI32();
        struct.setWorkflowIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.workflowExecuteId = iprot.readI64();
        struct.setWorkflowExecuteIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.retryTimes = iprot.readI32();
        struct.setRetryTimesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.currentRetryTime = iprot.readI32();
        struct.setCurrentRetryTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.retryInterval = iprot.readI64();
        struct.setRetryIntervalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fireTime = iprot.readI64();
        struct.setFireTimeIsSet(true);
      }
    }
  }

}

